
C:\Users\passp\AppData\Local\Temp\arduino_build_126509/clapper9.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
   0:	24 c0       	rjmp	.+72     	; 0x4a <__ctors_end>
   2:	48 c0       	rjmp	.+144    	; 0x94 <__bad_interrupt>
   4:	47 c0       	rjmp	.+142    	; 0x94 <__bad_interrupt>
   6:	46 c0       	rjmp	.+140    	; 0x94 <__bad_interrupt>
   8:	45 c0       	rjmp	.+138    	; 0x94 <__bad_interrupt>
   a:	44 c0       	rjmp	.+136    	; 0x94 <__bad_interrupt>
   c:	43 c0       	rjmp	.+134    	; 0x94 <__bad_interrupt>
   e:	42 c0       	rjmp	.+132    	; 0x94 <__bad_interrupt>
  10:	41 c0       	rjmp	.+130    	; 0x94 <__bad_interrupt>
  12:	40 c0       	rjmp	.+128    	; 0x94 <__bad_interrupt>
  14:	3f c0       	rjmp	.+126    	; 0x94 <__bad_interrupt>
  16:	62 c2       	rjmp	.+1220   	; 0x4dc <__vector_11>
  18:	3d c0       	rjmp	.+122    	; 0x94 <__bad_interrupt>
  1a:	3c c0       	rjmp	.+120    	; 0x94 <__bad_interrupt>
  1c:	3b c0       	rjmp	.+118    	; 0x94 <__bad_interrupt>
  1e:	3a c0       	rjmp	.+116    	; 0x94 <__bad_interrupt>
  20:	39 c0       	rjmp	.+114    	; 0x94 <__bad_interrupt>
  22:	38 c0       	rjmp	.+112    	; 0x94 <__bad_interrupt>
  24:	37 c0       	rjmp	.+110    	; 0x94 <__bad_interrupt>
  26:	36 c0       	rjmp	.+108    	; 0x94 <__bad_interrupt>
  28:	35 c0       	rjmp	.+106    	; 0x94 <__bad_interrupt>
  2a:	34 c0       	rjmp	.+104    	; 0x94 <__bad_interrupt>
  2c:	25 c2       	rjmp	.+1098   	; 0x478 <__vector_22>
  2e:	ff c1       	rjmp	.+1022   	; 0x42e <__vector_23>
  30:	31 c0       	rjmp	.+98     	; 0x94 <__bad_interrupt>
  32:	30 c0       	rjmp	.+96     	; 0x94 <__bad_interrupt>
  34:	2f c0       	rjmp	.+94     	; 0x94 <__bad_interrupt>
  36:	2e c0       	rjmp	.+92     	; 0x94 <__bad_interrupt>
  38:	2d c0       	rjmp	.+90     	; 0x94 <__bad_interrupt>
  3a:	2c c0       	rjmp	.+88     	; 0x94 <__bad_interrupt>

0000003c <__trampolines_end>:
__trampolines_start():
  3c:	01 02       	muls	r16, r17
  3e:	04 08       	sbc	r0, r4
  40:	10 20       	and	r1, r0
  42:	40 80       	ld	r4, Z
  44:	04 02       	muls	r16, r20
  46:	01 08       	sbc	r0, r1

00000048 <__ctors_start>:
__ctors_start():
  48:	88 04       	cpc	r8, r8

0000004a <__ctors_end>:
__dtors_end():
  4a:	11 24       	eor	r1, r1
  4c:	1f be       	out	0x3f, r1	; 63
  4e:	cf ef       	ldi	r28, 0xFF	; 255
  50:	d1 e0       	ldi	r29, 0x01	; 1
  52:	de bf       	out	0x3e, r29	; 62
  54:	cd bf       	out	0x3d, r28	; 61

00000056 <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
  56:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
  58:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
  5a:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
  5c:	ee e1       	ldi	r30, 0x1E	; 30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
  5e:	fe e0       	ldi	r31, 0x0E	; 14
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
  60:	02 c0       	rjmp	.+4      	; 0x66 <__do_copy_data+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
  62:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
  64:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
  66:	a8 32       	cpi	r26, 0x28	; 40
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
  68:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
  6a:	d9 f7       	brne	.-10     	; 0x62 <__do_copy_data+0xc>

0000006c <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
  6c:	21 e0       	ldi	r18, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
  6e:	a8 e2       	ldi	r26, 0x28	; 40
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
  70:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
  72:	01 c0       	rjmp	.+2      	; 0x76 <.do_clear_bss_start>

00000074 <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
  74:	1d 92       	st	X+, r1

00000076 <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
  76:	ad 37       	cpi	r26, 0x7D	; 125
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
  78:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
  7a:	e1 f7       	brne	.-8      	; 0x74 <.do_clear_bss_loop>

0000007c <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
  7c:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
  7e:	c5 e2       	ldi	r28, 0x25	; 37
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
  80:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
  82:	03 c0       	rjmp	.+6      	; 0x8a <__do_global_ctors+0xe>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
  84:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
  86:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
  88:	c2 d6       	rcall	.+3460   	; 0xe0e <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
  8a:	c4 32       	cpi	r28, 0x24	; 36
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
  8c:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
  8e:	d1 f7       	brne	.-12     	; 0x84 <__do_global_ctors+0x8>
  90:	6f d2       	rcall	.+1246   	; 0x570 <main>
  92:	c3 c6       	rjmp	.+3462   	; 0xe1a <_exit>

00000094 <__bad_interrupt>:
__vector_28():
  94:	b5 cf       	rjmp	.-150    	; 0x0 <__vectors>

00000096 <digitalWrite.constprop.19>:
digitalWrite.constprop.19():
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/wiring_digital.c:185
void digitalWrite(uint8_t pin, uint8_t val)
{
  #ifndef __AVR_ATtiny828__
  if (pin&64) {pin=analogInputToDigitalPin((pin&63));}
  #endif
  uint8_t bit = digitalPinToBitMask(pin);
  96:	e4 e4       	ldi	r30, 0x44	; 68
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	e4 91       	lpm	r30, Z
Timer2_SetCompareOutputModeA():
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/core_timers.h:511
}
timer2_com_t;

__attribute__((always_inline)) static inline void Timer2_SetCompareOutputModeA( timer2_com_t com )
{
  TCCR2A = (TCCR2A & ~MASK2(COM2A1,COM2A0)) | (com << COM2A0);
  9c:	90 91 ca 00 	lds	r25, 0x00CA	; 0x8000ca <__DATA_REGION_ORIGIN__+0x6a>
  a0:	9f 73       	andi	r25, 0x3F	; 63
  a2:	90 93 ca 00 	sts	0x00CA, r25	; 0x8000ca <__DATA_REGION_ORIGIN__+0x6a>
  a6:	9e 2f       	mov	r25, r30
  a8:	90 95       	com	r25
digitalWrite.constprop.19():
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/wiring_digital.c:198
  turnOffPWM( pin );

  out = portOutputRegister(port);
  pue = portPullupRegister(port);

  if (val == LOW) {
  aa:	81 11       	cpse	r24, r1
  ac:	0c c0       	rjmp	.+24     	; 0xc6 <digitalWrite.constprop.19+0x30>
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/wiring_digital.c:199
    uint8_t oldSREG = SREG;
  ae:	2f b7       	in	r18, 0x3f	; 63
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/wiring_digital.c:200
    cli();
  b0:	f8 94       	cli
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/wiring_digital.c:201
    *out &= ~bit;
  b2:	88 b3       	in	r24, 0x18	; 24
  b4:	89 23       	and	r24, r25
  b6:	88 bb       	out	0x18, r24	; 24
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/wiring_digital.c:202
    *pue &= ~bit; //Turn off the pullups
  b8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
  bc:	98 23       	and	r25, r24
  be:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/wiring_digital.c:203
    SREG = oldSREG;
  c2:	2f bf       	out	0x3f, r18	; 63
  c4:	08 95       	ret
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/wiring_digital.c:205
  } else {
    uint8_t oldSREG = SREG;
  c6:	8f b7       	in	r24, 0x3f	; 63
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/wiring_digital.c:206
    cli();
  c8:	f8 94       	cli
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/wiring_digital.c:207
    *out |= bit;
  ca:	28 b3       	in	r18, 0x18	; 24
  cc:	e2 2b       	or	r30, r18
  ce:	e8 bb       	out	0x18, r30	; 24
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/wiring_digital.c:208
    *pue &= ~bit;
  d0:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
  d4:	92 23       	and	r25, r18
  d6:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/wiring_digital.c:209
    SREG = oldSREG;
  da:	8f bf       	out	0x3f, r24	; 63
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/wiring_digital.c:211
  }
}
  dc:	08 95       	ret

000000de <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/Print.cpp:34

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  de:	cf 92       	push	r12
  e0:	df 92       	push	r13
  e2:	ef 92       	push	r14
  e4:	ff 92       	push	r15
  e6:	0f 93       	push	r16
  e8:	1f 93       	push	r17
  ea:	cf 93       	push	r28
  ec:	df 93       	push	r29
  ee:	6c 01       	movw	r12, r24
  f0:	eb 01       	movw	r28, r22
  f2:	7b 01       	movw	r14, r22
  f4:	e4 0e       	add	r14, r20
  f6:	f5 1e       	adc	r15, r21
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/Print.cpp:35
  size_t n = 0;
  f8:	10 e0       	ldi	r17, 0x00	; 0
  fa:	00 e0       	ldi	r16, 0x00	; 0
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/Print.cpp:36
  while (size--) {
  fc:	ce 15       	cp	r28, r14
  fe:	df 05       	cpc	r29, r15
 100:	61 f0       	breq	.+24     	; 0x11a <Print::write(unsigned char const*, unsigned int)+0x3c>
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/Print.cpp:37
    n += write(*buffer++);
 102:	69 91       	ld	r22, Y+
 104:	d6 01       	movw	r26, r12
 106:	ed 91       	ld	r30, X+
 108:	fc 91       	ld	r31, X
 10a:	01 90       	ld	r0, Z+
 10c:	f0 81       	ld	r31, Z
 10e:	e0 2d       	mov	r30, r0
 110:	c6 01       	movw	r24, r12
 112:	09 95       	icall
 114:	08 0f       	add	r16, r24
 116:	19 1f       	adc	r17, r25
 118:	f1 cf       	rjmp	.-30     	; 0xfc <Print::write(unsigned char const*, unsigned int)+0x1e>
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/Print.cpp:40
  }
  return n;
}
 11a:	c8 01       	movw	r24, r16
 11c:	df 91       	pop	r29
 11e:	cf 91       	pop	r28
 120:	1f 91       	pop	r17
 122:	0f 91       	pop	r16
 124:	ff 90       	pop	r15
 126:	ef 90       	pop	r14
 128:	df 90       	pop	r13
 12a:	cf 90       	pop	r12
 12c:	08 95       	ret

0000012e <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/HardwareSerial.cpp:198
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
 12e:	fc 01       	movw	r30, r24
 130:	53 8d       	ldd	r21, Z+27	; 0x1b
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/HardwareSerial.cpp:199
    tail = _tx_buffer_tail;
 132:	44 8d       	ldd	r20, Z+28	; 0x1c
 134:	25 2f       	mov	r18, r21
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	84 2f       	mov	r24, r20
 13a:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/HardwareSerial.cpp:201
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
 13c:	82 1b       	sub	r24, r18
 13e:	93 0b       	sbc	r25, r19
 140:	54 17       	cp	r21, r20
 142:	10 f0       	brcs	.+4      	; 0x148 <HardwareSerial::availableForWrite()+0x1a>
 144:	0f 96       	adiw	r24, 0x0f	; 15
 146:	08 95       	ret
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/HardwareSerial.cpp:202
  return tail - head - 1;
 148:	01 97       	sbiw	r24, 0x01	; 1
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/HardwareSerial.cpp:203
}
 14a:	08 95       	ret

0000014c <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/HardwareSerial.cpp:181
    return _rx_buffer[_rx_buffer_tail];
  }
}

int HardwareSerial::read(void)
{
 14c:	fc 01       	movw	r30, r24
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/HardwareSerial.cpp:183
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 14e:	91 8d       	ldd	r25, Z+25	; 0x19
 150:	82 8d       	ldd	r24, Z+26	; 0x1a
 152:	98 17       	cp	r25, r24
 154:	61 f0       	breq	.+24     	; 0x16e <HardwareSerial::read()+0x22>
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/HardwareSerial.cpp:186
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 156:	a2 8d       	ldd	r26, Z+26	; 0x1a
 158:	ae 0f       	add	r26, r30
 15a:	bf 2f       	mov	r27, r31
 15c:	b1 1d       	adc	r27, r1
 15e:	5d 96       	adiw	r26, 0x1d	; 29
 160:	8c 91       	ld	r24, X
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/HardwareSerial.cpp:187
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 162:	92 8d       	ldd	r25, Z+26	; 0x1a
 164:	9f 5f       	subi	r25, 0xFF	; 255
 166:	9f 70       	andi	r25, 0x0F	; 15
 168:	92 8f       	std	Z+26, r25	; 0x1a
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/HardwareSerial.cpp:188
    return c;
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	08 95       	ret
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/HardwareSerial.cpp:184

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 16e:	8f ef       	ldi	r24, 0xFF	; 255
 170:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/HardwareSerial.cpp:190
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 172:	08 95       	ret

00000174 <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/HardwareSerial.cpp:172
{
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
}

int HardwareSerial::peek(void)
{
 174:	fc 01       	movw	r30, r24
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/HardwareSerial.cpp:173
  if (_rx_buffer_head == _rx_buffer_tail) {
 176:	91 8d       	ldd	r25, Z+25	; 0x19
 178:	82 8d       	ldd	r24, Z+26	; 0x1a
 17a:	98 17       	cp	r25, r24
 17c:	31 f0       	breq	.+12     	; 0x18a <HardwareSerial::peek()+0x16>
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/HardwareSerial.cpp:176
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 17e:	82 8d       	ldd	r24, Z+26	; 0x1a
 180:	e8 0f       	add	r30, r24
 182:	f1 1d       	adc	r31, r1
 184:	85 8d       	ldd	r24, Z+29	; 0x1d
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	08 95       	ret
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/HardwareSerial.cpp:174
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 18a:	8f ef       	ldi	r24, 0xFF	; 255
 18c:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/HardwareSerial.cpp:178
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 18e:	08 95       	ret

00000190 <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/HardwareSerial.cpp:167
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 190:	fc 01       	movw	r30, r24
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/HardwareSerial.cpp:168
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 192:	91 8d       	ldd	r25, Z+25	; 0x19
 194:	22 8d       	ldd	r18, Z+26	; 0x1a
 196:	89 2f       	mov	r24, r25
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	40 96       	adiw	r24, 0x10	; 16
 19c:	82 1b       	sub	r24, r18
 19e:	91 09       	sbc	r25, r1
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/HardwareSerial.cpp:169
}
 1a0:	8f 70       	andi	r24, 0x0F	; 15
 1a2:	99 27       	eor	r25, r25
 1a4:	08 95       	ret

000001a6 <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/HardwareSerial.cpp:90
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 1a6:	fc 01       	movw	r30, r24
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/HardwareSerial.cpp:93
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 1a8:	a4 8d       	ldd	r26, Z+28	; 0x1c
 1aa:	a8 0f       	add	r26, r24
 1ac:	b9 2f       	mov	r27, r25
 1ae:	b1 1d       	adc	r27, r1
 1b0:	9d 96       	adiw	r26, 0x2d	; 45
 1b2:	2c 91       	ld	r18, X
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/HardwareSerial.cpp:94
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 1b4:	84 8d       	ldd	r24, Z+28	; 0x1c
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	01 96       	adiw	r24, 0x01	; 1
 1ba:	8f 70       	andi	r24, 0x0F	; 15
 1bc:	99 27       	eor	r25, r25
 1be:	84 8f       	std	Z+28, r24	; 0x1c
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/HardwareSerial.cpp:96

  *_udr = c;
 1c0:	a6 89       	ldd	r26, Z+22	; 0x16
 1c2:	b7 89       	ldd	r27, Z+23	; 0x17
 1c4:	2c 93       	st	X, r18
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/HardwareSerial.cpp:104
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

#ifdef MPCM0
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
 1c6:	a0 89       	ldd	r26, Z+16	; 0x10
 1c8:	b1 89       	ldd	r27, Z+17	; 0x11
 1ca:	8c 91       	ld	r24, X
 1cc:	83 70       	andi	r24, 0x03	; 3
 1ce:	80 64       	ori	r24, 0x40	; 64
 1d0:	8c 93       	st	X, r24
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/HardwareSerial.cpp:109
#else
  *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif

  if (_tx_buffer_head == _tx_buffer_tail) {
 1d2:	93 8d       	ldd	r25, Z+27	; 0x1b
 1d4:	84 8d       	ldd	r24, Z+28	; 0x1c
 1d6:	98 13       	cpse	r25, r24
 1d8:	06 c0       	rjmp	.+12     	; 0x1e6 <HardwareSerial::_tx_udr_empty_irq()+0x40>
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/HardwareSerial.cpp:111
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
 1da:	02 88       	ldd	r0, Z+18	; 0x12
 1dc:	f3 89       	ldd	r31, Z+19	; 0x13
 1de:	e0 2d       	mov	r30, r0
 1e0:	80 81       	ld	r24, Z
 1e2:	8f 7d       	andi	r24, 0xDF	; 223
 1e4:	80 83       	st	Z, r24
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/HardwareSerial.cpp:113
  }
}
 1e6:	08 95       	ret

000001e8 <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/HardwareSerial.cpp:226
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished transmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
 1e8:	ef 92       	push	r14
 1ea:	ff 92       	push	r15
 1ec:	0f 93       	push	r16
 1ee:	1f 93       	push	r17
 1f0:	cf 93       	push	r28
 1f2:	df 93       	push	r29
 1f4:	ec 01       	movw	r28, r24
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/HardwareSerial.cpp:227
  _written = true;
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	88 8f       	std	Y+24, r24	; 0x18
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/HardwareSerial.cpp:232
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 1fa:	9b 8d       	ldd	r25, Y+27	; 0x1b
 1fc:	8c 8d       	ldd	r24, Y+28	; 0x1c
 1fe:	98 13       	cpse	r25, r24
 200:	1a c0       	rjmp	.+52     	; 0x236 <__stack+0x37>
 202:	e8 89       	ldd	r30, Y+16	; 0x10
 204:	f9 89       	ldd	r31, Y+17	; 0x11
 206:	80 81       	ld	r24, Z
 208:	85 ff       	sbrs	r24, 5
 20a:	15 c0       	rjmp	.+42     	; 0x236 <__stack+0x37>
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/HardwareSerial.cpp:241
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 20c:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
c:\users\passp\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 20e:	f8 94       	cli
_ZN14HardwareSerial5writeEh():
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/HardwareSerial.cpp:242
      *_udr = c;
 210:	ee 89       	ldd	r30, Y+22	; 0x16
 212:	ff 89       	ldd	r31, Y+23	; 0x17
 214:	60 83       	st	Z, r22
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/HardwareSerial.cpp:244
#ifdef MPCM0
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
 216:	e8 89       	ldd	r30, Y+16	; 0x10
 218:	f9 89       	ldd	r31, Y+17	; 0x11
 21a:	80 81       	ld	r24, Z
 21c:	83 70       	andi	r24, 0x03	; 3
 21e:	80 64       	ori	r24, 0x40	; 64
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/HardwareSerial.cpp:275
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    _tx_buffer_head = i;
    sbi(*_ucsrb, UDRIE0);
 220:	80 83       	st	Z, r24
__iRestore():
c:\users\passp\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 222:	9f bf       	out	0x3f, r25	; 63
_ZN14HardwareSerial5writeEh():
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/HardwareSerial.cpp:279
  }

  return 1;
}
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	df 91       	pop	r29
 22a:	cf 91       	pop	r28
 22c:	1f 91       	pop	r17
 22e:	0f 91       	pop	r16
 230:	ff 90       	pop	r15
 232:	ef 90       	pop	r14
 234:	08 95       	ret
 236:	f6 2e       	mov	r15, r22
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/HardwareSerial.cpp:251
      *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
#endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 238:	0b 8d       	ldd	r16, Y+27	; 0x1b
 23a:	10 e0       	ldi	r17, 0x00	; 0
 23c:	0f 5f       	subi	r16, 0xFF	; 255
 23e:	1f 4f       	sbci	r17, 0xFF	; 255
 240:	0f 70       	andi	r16, 0x0F	; 15
 242:	11 27       	eor	r17, r17
 244:	e0 2e       	mov	r14, r16
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/HardwareSerial.cpp:255

  // If the output buffer is full, there's nothing for it other than to
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 246:	8c 8d       	ldd	r24, Y+28	; 0x1c
 248:	8e 11       	cpse	r24, r14
 24a:	0b c0       	rjmp	.+22     	; 0x262 <__stack+0x63>
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/HardwareSerial.cpp:256
    if (bit_is_clear(SREG, SREG_I)) {
 24c:	0f b6       	in	r0, 0x3f	; 63
 24e:	07 fc       	sbrc	r0, 7
 250:	fa cf       	rjmp	.-12     	; 0x246 <__stack+0x47>
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/HardwareSerial.cpp:261
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 252:	e8 89       	ldd	r30, Y+16	; 0x10
 254:	f9 89       	ldd	r31, Y+17	; 0x11
 256:	80 81       	ld	r24, Z
 258:	85 ff       	sbrs	r24, 5
 25a:	f5 cf       	rjmp	.-22     	; 0x246 <__stack+0x47>
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/HardwareSerial.cpp:262
  _tx_udr_empty_irq();
 25c:	ce 01       	movw	r24, r28
 25e:	a3 df       	rcall	.-186    	; 0x1a6 <HardwareSerial::_tx_udr_empty_irq()>
 260:	f2 cf       	rjmp	.-28     	; 0x246 <__stack+0x47>
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/HardwareSerial.cpp:268
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 262:	eb 8d       	ldd	r30, Y+27	; 0x1b
 264:	ec 0f       	add	r30, r28
 266:	fd 2f       	mov	r31, r29
 268:	f1 1d       	adc	r31, r1
 26a:	f5 a6       	std	Z+45, r15	; 0x2d
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/HardwareSerial.cpp:273

  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 26c:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
c:\users\passp\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 26e:	f8 94       	cli
_ZN14HardwareSerial5writeEh():
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/HardwareSerial.cpp:274
    _tx_buffer_head = i;
 270:	0b 8f       	std	Y+27, r16	; 0x1b
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/HardwareSerial.cpp:275
    sbi(*_ucsrb, UDRIE0);
 272:	ea 89       	ldd	r30, Y+18	; 0x12
 274:	fb 89       	ldd	r31, Y+19	; 0x13
 276:	80 81       	ld	r24, Z
 278:	80 62       	ori	r24, 0x20	; 32
 27a:	d2 cf       	rjmp	.-92     	; 0x220 <__stack+0x21>

0000027c <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/HardwareSerial.cpp:206
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 27c:	cf 93       	push	r28
 27e:	df 93       	push	r29
 280:	ec 01       	movw	r28, r24
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/HardwareSerial.cpp:210
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 282:	88 8d       	ldd	r24, Y+24	; 0x18
 284:	88 23       	and	r24, r24
 286:	b1 f0       	breq	.+44     	; 0x2b4 <HardwareSerial::flush()+0x38>
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/HardwareSerial.cpp:213
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 288:	aa 89       	ldd	r26, Y+18	; 0x12
 28a:	bb 89       	ldd	r27, Y+19	; 0x13
 28c:	e8 89       	ldd	r30, Y+16	; 0x10
 28e:	f9 89       	ldd	r31, Y+17	; 0x11
 290:	8c 91       	ld	r24, X
 292:	85 fd       	sbrc	r24, 5
 294:	03 c0       	rjmp	.+6      	; 0x29c <HardwareSerial::flush()+0x20>
 296:	80 81       	ld	r24, Z
 298:	86 fd       	sbrc	r24, 6
 29a:	0c c0       	rjmp	.+24     	; 0x2b4 <HardwareSerial::flush()+0x38>
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/HardwareSerial.cpp:214
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 29c:	0f b6       	in	r0, 0x3f	; 63
 29e:	07 fc       	sbrc	r0, 7
 2a0:	f7 cf       	rjmp	.-18     	; 0x290 <HardwareSerial::flush()+0x14>
 2a2:	8c 91       	ld	r24, X
 2a4:	85 ff       	sbrs	r24, 5
 2a6:	f2 cf       	rjmp	.-28     	; 0x28c <HardwareSerial::flush()+0x10>
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/HardwareSerial.cpp:218
  // Interrupts are globally disabled, but the DR empty
  // interrupt should be enabled, so poll the DR empty flag to
  // prevent deadlock
  if (bit_is_set(*_ucsra, UDRE0))
 2a8:	80 81       	ld	r24, Z
 2aa:	85 ff       	sbrs	r24, 5
 2ac:	ed cf       	rjmp	.-38     	; 0x288 <HardwareSerial::flush()+0xc>
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/HardwareSerial.cpp:219
    _tx_udr_empty_irq();
 2ae:	ce 01       	movw	r24, r28
 2b0:	7a df       	rcall	.-268    	; 0x1a6 <HardwareSerial::_tx_udr_empty_irq()>
 2b2:	ea cf       	rjmp	.-44     	; 0x288 <HardwareSerial::flush()+0xc>
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/HardwareSerial.cpp:223
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished transmission (TXC is set).
}
 2b4:	df 91       	pop	r29
 2b6:	cf 91       	pop	r28
 2b8:	08 95       	ret

000002ba <micros>:
micros():
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/wiring.c:134
  return m;
}
unsigned long micros()
{
  unsigned long m;
  uint8_t oldSREG = SREG, t;
 2ba:	3f b7       	in	r19, 0x3f	; 63
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/wiring.c:136

  cli();
 2bc:	f8 94       	cli
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/wiring.c:137
  m = millis_timer_overflow_count;
 2be:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <millis_timer_overflow_count>
 2c2:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <millis_timer_overflow_count+0x1>
 2c6:	a0 91 2f 01 	lds	r26, 0x012F	; 0x80012f <millis_timer_overflow_count+0x2>
 2ca:	b0 91 30 01 	lds	r27, 0x0130	; 0x800130 <millis_timer_overflow_count+0x3>
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/wiring.c:139
#if defined(TCNT0) && (TIMER_TO_USE_FOR_MILLIS == 0) && !defined(TCW0)
  t = TCNT0;
 2ce:	22 b7       	in	r18, 0x32	; 50
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/wiring.c:151
#else
  #error Millis()/Micros() timer not defined
#endif

#if defined(TIFR0) && (TIMER_TO_USE_FOR_MILLIS == 0)
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
 2d0:	08 b6       	in	r0, 0x38	; 56
 2d2:	00 fe       	sbrs	r0, 0
 2d4:	05 c0       	rjmp	.+10     	; 0x2e0 <micros+0x26>
 2d6:	2f 3f       	cpi	r18, 0xFF	; 255
 2d8:	19 f0       	breq	.+6      	; 0x2e0 <micros+0x26>
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/wiring.c:152
    m++;
 2da:	01 96       	adiw	r24, 0x01	; 1
 2dc:	a1 1d       	adc	r26, r1
 2de:	b1 1d       	adc	r27, r1
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/wiring.c:164
#elif defined(TIFR) && (TIMER_TO_USE_FOR_MILLIS == 1)
  if ((TIFR & _BV(TOV1)) && (t < 255))
    m++;
#endif

  SREG = oldSREG;
 2e0:	3f bf       	out	0x3f, r19	; 63
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/wiring.c:171

#if F_CPU < 1000000L
  return ((m << 8) + t) * MillisTimer_Prescale_Value * (1000000L/F_CPU);
#else
#if (MillisTimer_Prescale_Value % clockCyclesPerMicrosecond() == 0 ) // Can we just do it the naive way? If so great!
  return ((m << 8) + t) * (MillisTimer_Prescale_Value / clockCyclesPerMicrosecond());
 2e2:	ba 2f       	mov	r27, r26
 2e4:	a9 2f       	mov	r26, r25
 2e6:	98 2f       	mov	r25, r24
 2e8:	88 27       	eor	r24, r24
 2ea:	bc 01       	movw	r22, r24
 2ec:	cd 01       	movw	r24, r26
 2ee:	62 0f       	add	r22, r18
 2f0:	71 1d       	adc	r23, r1
 2f2:	81 1d       	adc	r24, r1
 2f4:	91 1d       	adc	r25, r1
 2f6:	43 e0       	ldi	r20, 0x03	; 3
 2f8:	66 0f       	add	r22, r22
 2fa:	77 1f       	adc	r23, r23
 2fc:	88 1f       	adc	r24, r24
 2fe:	99 1f       	adc	r25, r25
 300:	4a 95       	dec	r20
 302:	d1 f7       	brne	.-12     	; 0x2f8 <micros+0x3e>
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/wiring.c:217
  //the high part gets divided by cCPuS then multiplied by the prescaler. Then take the low 8 bits plus the high part modulo-cCPuS to correct for the division, then multiply that by the prescaler value first before dividing by cCPuS, and finally add the two together.
  //return ((m << 8 )/clockCyclesPerMicrosecond()* MillisTimer_Prescale_Value) + ((t+(((m<<8)%clockCyclesPerMicrosecond())) * MillisTimer_Prescale_Value / clockCyclesPerMicrosecond()));
  return ((m << 8 )/clockCyclesPerMicrosecond()* MillisTimer_Prescale_Value) + (t * MillisTimer_Prescale_Value / clockCyclesPerMicrosecond());
#endif
#endif
}
 304:	08 95       	ret

00000306 <delay.constprop.4>:
delay.constprop.4():
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/wiring.c:224
static void __empty() {
  // Empty
}
void yield(void) __attribute__ ((weak, alias("__empty")));

void delay(unsigned long ms)
 306:	cf 92       	push	r12
 308:	df 92       	push	r13
 30a:	ef 92       	push	r14
 30c:	ff 92       	push	r15
 30e:	cf 93       	push	r28
 310:	df 93       	push	r29
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/wiring.c:227
{
  #if (F_CPU>=1000000L)
  uint16_t start = (uint16_t)micros();
 312:	d3 df       	rcall	.-90     	; 0x2ba <micros>
 314:	eb 01       	movw	r28, r22
 316:	88 ee       	ldi	r24, 0xE8	; 232
 318:	c8 2e       	mov	r12, r24
 31a:	83 e0       	ldi	r24, 0x03	; 3
 31c:	d8 2e       	mov	r13, r24
 31e:	e1 2c       	mov	r14, r1
 320:	f1 2c       	mov	r15, r1
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/wiring.c:231

  while (ms > 0) {
    yield();
    while (((uint16_t)micros() - start) >= 1000 && ms) {
 322:	cb df       	rcall	.-106    	; 0x2ba <micros>
 324:	6c 1b       	sub	r22, r28
 326:	7d 0b       	sbc	r23, r29
 328:	68 3e       	cpi	r22, 0xE8	; 232
 32a:	73 40       	sbci	r23, 0x03	; 3
 32c:	a0 f0       	brcs	.+40     	; 0x356 <delay.constprop.4+0x50>
 32e:	c1 14       	cp	r12, r1
 330:	d1 04       	cpc	r13, r1
 332:	e1 04       	cpc	r14, r1
 334:	f1 04       	cpc	r15, r1
 336:	39 f4       	brne	.+14     	; 0x346 <delay.constprop.4+0x40>
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/wiring.c:241
  #else
  uint32_t start = millis();
  while((millis() - start) < ms)  /* NOP */yield();
  return;
  #endif
}
 338:	df 91       	pop	r29
 33a:	cf 91       	pop	r28
 33c:	ff 90       	pop	r15
 33e:	ef 90       	pop	r14
 340:	df 90       	pop	r13
 342:	cf 90       	pop	r12
 344:	08 95       	ret
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/wiring.c:232
  uint16_t start = (uint16_t)micros();

  while (ms > 0) {
    yield();
    while (((uint16_t)micros() - start) >= 1000 && ms) {
      ms--;
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	c8 1a       	sub	r12, r24
 34a:	d1 08       	sbc	r13, r1
 34c:	e1 08       	sbc	r14, r1
 34e:	f1 08       	sbc	r15, r1
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/wiring.c:233
      start += 1000;
 350:	c8 51       	subi	r28, 0x18	; 24
 352:	dc 4f       	sbci	r29, 0xFC	; 252
 354:	e6 cf       	rjmp	.-52     	; 0x322 <delay.constprop.4+0x1c>
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/wiring.c:229
void delay(unsigned long ms)
{
  #if (F_CPU>=1000000L)
  uint16_t start = (uint16_t)micros();

  while (ms > 0) {
 356:	c1 14       	cp	r12, r1
 358:	d1 04       	cpc	r13, r1
 35a:	e1 04       	cpc	r14, r1
 35c:	f1 04       	cpc	r15, r1
 35e:	09 f7       	brne	.-62     	; 0x322 <delay.constprop.4+0x1c>
 360:	eb cf       	rjmp	.-42     	; 0x338 <delay.constprop.4+0x32>

00000362 <millis>:
millis():
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/wiring.c:122
}

unsigned long millis()
{
  unsigned long m;
  uint8_t oldSREG = SREG;
 362:	2f b7       	in	r18, 0x3f	; 63
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/wiring.c:126

  // disable interrupts while we read millis_timer_millis or we might get an
  // inconsistent value (e.g. in the middle of a write to millis_timer_millis)
  cli();
 364:	f8 94       	cli
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/wiring.c:127
  m = millis_timer_millis;
 366:	60 91 29 01 	lds	r22, 0x0129	; 0x800129 <millis_timer_millis>
 36a:	70 91 2a 01 	lds	r23, 0x012A	; 0x80012a <millis_timer_millis+0x1>
 36e:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <millis_timer_millis+0x2>
 372:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <millis_timer_millis+0x3>
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/wiring.c:128
  SREG = oldSREG;
 376:	2f bf       	out	0x3f, r18	; 63
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/wiring.c:130
  return m;
}
 378:	08 95       	ret

0000037a <Print::write(char const*) [clone .part.2] [clone .constprop.18]>:
_ZN5Print5writeEPKc.part.2.constprop.18():
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/Print.h:51
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 37a:	fc 01       	movw	r30, r24
 37c:	01 90       	ld	r0, Z+
 37e:	00 20       	and	r0, r0
 380:	e9 f7       	brne	.-6      	; 0x37c <Print::write(char const*) [clone .part.2] [clone .constprop.18]+0x2>
 382:	31 97       	sbiw	r30, 0x01	; 1
 384:	af 01       	movw	r20, r30
 386:	48 1b       	sub	r20, r24
 388:	59 0b       	sbc	r21, r25
 38a:	bc 01       	movw	r22, r24
 38c:	80 e4       	ldi	r24, 0x40	; 64
 38e:	91 e0       	ldi	r25, 0x01	; 1
 390:	a6 ce       	rjmp	.-692    	; 0xde <Print::write(unsigned char const*, unsigned int)>

00000392 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.16]>:
_ZN5Print11printNumberEmh.constprop.16():
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/Print.cpp:230
  return vfprintf_P(&f, (const char *)ifsh, ap);
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 392:	8f 92       	push	r8
 394:	9f 92       	push	r9
 396:	af 92       	push	r10
 398:	bf 92       	push	r11
 39a:	ef 92       	push	r14
 39c:	ff 92       	push	r15
 39e:	0f 93       	push	r16
 3a0:	1f 93       	push	r17
 3a2:	cf 93       	push	r28
 3a4:	df 93       	push	r29
 3a6:	cd b7       	in	r28, 0x3d	; 61
 3a8:	de b7       	in	r29, 0x3e	; 62
 3aa:	a1 97       	sbiw	r28, 0x21	; 33
 3ac:	0f b6       	in	r0, 0x3f	; 63
 3ae:	f8 94       	cli
 3b0:	de bf       	out	0x3e, r29	; 62
 3b2:	0f be       	out	0x3f, r0	; 63
 3b4:	cd bf       	out	0x3d, r28	; 61
 3b6:	16 2f       	mov	r17, r22
 3b8:	04 2f       	mov	r16, r20
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/Print.cpp:234
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 3ba:	19 a2       	std	Y+33, r1	; 0x21
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/Print.cpp:237

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 3bc:	42 30       	cpi	r20, 0x02	; 2
 3be:	08 f4       	brcc	.+2      	; 0x3c2 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.16]+0x30>
 3c0:	0a e0       	ldi	r16, 0x0A	; 10
 3c2:	7e 01       	movw	r14, r28
 3c4:	21 e2       	ldi	r18, 0x21	; 33
 3c6:	e2 0e       	add	r14, r18
 3c8:	f1 1c       	adc	r15, r1
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/Print.cpp:241

  do {
    unsigned long m = n;
    n /= base;
 3ca:	80 2e       	mov	r8, r16
 3cc:	91 2c       	mov	r9, r1
 3ce:	b1 2c       	mov	r11, r1
 3d0:	a1 2c       	mov	r10, r1
 3d2:	61 2f       	mov	r22, r17
 3d4:	a5 01       	movw	r20, r10
 3d6:	94 01       	movw	r18, r8
 3d8:	f8 d4       	rcall	.+2544   	; 0xdca <__udivmodsi4>
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/Print.cpp:242
    char c = m - base * n;
 3da:	80 2f       	mov	r24, r16
 3dc:	62 2f       	mov	r22, r18
 3de:	c5 d2       	rcall	.+1418   	; 0x96a <__mulqi3>
 3e0:	18 1b       	sub	r17, r24
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/Print.cpp:243
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 3e2:	1a 30       	cpi	r17, 0x0A	; 10
 3e4:	14 f5       	brge	.+68     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 3e6:	10 5d       	subi	r17, 0xD0	; 208
 3e8:	f7 01       	movw	r30, r14
 3ea:	12 93       	st	-Z, r17
 3ec:	7f 01       	movw	r14, r30
 3ee:	12 2f       	mov	r17, r18
 3f0:	73 2f       	mov	r23, r19
 3f2:	ca 01       	movw	r24, r20
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/Print.cpp:244
  } while(n);
 3f4:	23 2b       	or	r18, r19
 3f6:	24 2b       	or	r18, r20
 3f8:	25 2b       	or	r18, r21
 3fa:	59 f7       	brne	.-42     	; 0x3d2 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.16]+0x40>
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/Print.h:50
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	80 e0       	ldi	r24, 0x00	; 0
write():
 400:	30 97       	sbiw	r30, 0x00	; 0
 402:	11 f0       	breq	.+4      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 404:	cf 01       	movw	r24, r30
 406:	b9 df       	rcall	.-142    	; 0x37a <Print::write(char const*) [clone .part.2] [clone .constprop.18]>
_ZN5Print11printNumberEmh.constprop.16():
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/Print.cpp:247

  return write(str);
}
 408:	a1 96       	adiw	r28, 0x21	; 33
 40a:	0f b6       	in	r0, 0x3f	; 63
 40c:	f8 94       	cli
 40e:	de bf       	out	0x3e, r29	; 62
 410:	0f be       	out	0x3f, r0	; 63
 412:	cd bf       	out	0x3d, r28	; 61
 414:	df 91       	pop	r29
 416:	cf 91       	pop	r28
 418:	1f 91       	pop	r17
 41a:	0f 91       	pop	r16
 41c:	ff 90       	pop	r15
 41e:	ef 90       	pop	r14
 420:	bf 90       	pop	r11
 422:	af 90       	pop	r10
 424:	9f 90       	pop	r9
 426:	8f 90       	pop	r8
 428:	08 95       	ret
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/Print.cpp:243

  do {
    unsigned long m = n;
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 42a:	19 5c       	subi	r17, 0xC9	; 201
 42c:	dd cf       	rjmp	.-70     	; 0x3e8 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.16]+0x56>

0000042e <__vector_23>:
__vector_23():
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/HardwareSerial0.cpp:63
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 42e:	1f 92       	push	r1
 430:	0f 92       	push	r0
 432:	0f b6       	in	r0, 0x3f	; 63
 434:	0f 92       	push	r0
 436:	11 24       	eor	r1, r1
 438:	2f 93       	push	r18
 43a:	3f 93       	push	r19
 43c:	4f 93       	push	r20
 43e:	5f 93       	push	r21
 440:	6f 93       	push	r22
 442:	7f 93       	push	r23
 444:	8f 93       	push	r24
 446:	9f 93       	push	r25
 448:	af 93       	push	r26
 44a:	bf 93       	push	r27
 44c:	ef 93       	push	r30
 44e:	ff 93       	push	r31
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
 450:	80 e4       	ldi	r24, 0x40	; 64
 452:	91 e0       	ldi	r25, 0x01	; 1
 454:	a8 de       	rcall	.-688    	; 0x1a6 <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/HardwareSerial0.cpp:65
}
 456:	ff 91       	pop	r31
 458:	ef 91       	pop	r30
 45a:	bf 91       	pop	r27
 45c:	af 91       	pop	r26
 45e:	9f 91       	pop	r25
 460:	8f 91       	pop	r24
 462:	7f 91       	pop	r23
 464:	6f 91       	pop	r22
 466:	5f 91       	pop	r21
 468:	4f 91       	pop	r20
 46a:	3f 91       	pop	r19
 46c:	2f 91       	pop	r18
 46e:	0f 90       	pop	r0
 470:	0f be       	out	0x3f, r0	; 63
 472:	0f 90       	pop	r0
 474:	1f 90       	pop	r1
 476:	18 95       	reti

00000478 <__vector_22>:
__vector_22():
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/HardwareSerial0.cpp:48
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 478:	1f 92       	push	r1
 47a:	0f 92       	push	r0
 47c:	0f b6       	in	r0, 0x3f	; 63
 47e:	0f 92       	push	r0
 480:	11 24       	eor	r1, r1
 482:	2f 93       	push	r18
 484:	8f 93       	push	r24
 486:	9f 93       	push	r25
 488:	ef 93       	push	r30
 48a:	ff 93       	push	r31
_rx_complete_irq():
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/HardwareSerial_private.h:103

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 48c:	e0 91 50 01 	lds	r30, 0x0150	; 0x800150 <Serial+0x10>
 490:	f0 91 51 01 	lds	r31, 0x0151	; 0x800151 <Serial+0x11>
 494:	80 81       	ld	r24, Z
 496:	e0 91 56 01 	lds	r30, 0x0156	; 0x800156 <Serial+0x16>
 49a:	f0 91 57 01 	lds	r31, 0x0157	; 0x800157 <Serial+0x17>
 49e:	82 fd       	sbrc	r24, 2
 4a0:	1b c0       	rjmp	.+54     	; 0x4d8 <__vector_22+0x60>
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/HardwareSerial_private.h:106
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 4a2:	90 81       	ld	r25, Z
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/HardwareSerial_private.h:107
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 4a4:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <Serial+0x19>
 4a8:	8f 5f       	subi	r24, 0xFF	; 255
 4aa:	8f 70       	andi	r24, 0x0F	; 15
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/HardwareSerial_private.h:113

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 4ac:	20 91 5a 01 	lds	r18, 0x015A	; 0x80015a <Serial+0x1a>
 4b0:	82 17       	cp	r24, r18
 4b2:	41 f0       	breq	.+16     	; 0x4c4 <__vector_22+0x4c>
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/HardwareSerial_private.h:114
      _rx_buffer[_rx_buffer_head] = c;
 4b4:	e0 91 59 01 	lds	r30, 0x0159	; 0x800159 <Serial+0x19>
 4b8:	f0 e0       	ldi	r31, 0x00	; 0
 4ba:	e0 5c       	subi	r30, 0xC0	; 192
 4bc:	fe 4f       	sbci	r31, 0xFE	; 254
 4be:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/HardwareSerial_private.h:115
      _rx_buffer_head = i;
 4c0:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <Serial+0x19>
__vector_22():
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/HardwareSerial0.cpp:50
    Serial._rx_complete_irq();
  }
 4c4:	ff 91       	pop	r31
 4c6:	ef 91       	pop	r30
 4c8:	9f 91       	pop	r25
 4ca:	8f 91       	pop	r24
 4cc:	2f 91       	pop	r18
 4ce:	0f 90       	pop	r0
 4d0:	0f be       	out	0x3f, r0	; 63
 4d2:	0f 90       	pop	r0
 4d4:	1f 90       	pop	r1
 4d6:	18 95       	reti
_rx_complete_irq():
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/HardwareSerial_private.h:119
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 4d8:	80 81       	ld	r24, Z
 4da:	f4 cf       	rjmp	.-24     	; 0x4c4 <__vector_22+0x4c>

000004dc <__vector_11>:
__vector_11():
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/wiring.c:86
volatile unsigned long millis_timer_overflow_count = 0;
volatile unsigned long millis_timer_millis = 0;
static unsigned char millis_timer_fract = 0;

ISR(MILLISTIMER_OVF_vect)
{
 4dc:	1f 92       	push	r1
 4de:	0f 92       	push	r0
 4e0:	0f b6       	in	r0, 0x3f	; 63
 4e2:	0f 92       	push	r0
 4e4:	11 24       	eor	r1, r1
 4e6:	2f 93       	push	r18
 4e8:	3f 93       	push	r19
 4ea:	8f 93       	push	r24
 4ec:	9f 93       	push	r25
 4ee:	af 93       	push	r26
 4f0:	bf 93       	push	r27
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/wiring.c:89
  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access)
  unsigned long m = millis_timer_millis;
 4f2:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <millis_timer_millis>
 4f6:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <millis_timer_millis+0x1>
 4fa:	a0 91 2b 01 	lds	r26, 0x012B	; 0x80012b <millis_timer_millis+0x2>
 4fe:	b0 91 2c 01 	lds	r27, 0x012C	; 0x80012c <millis_timer_millis+0x3>
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/wiring.c:90
  unsigned char f = millis_timer_fract;
 502:	30 91 28 01 	lds	r19, 0x0128	; 0x800128 <__data_end>
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/wiring.c:102
    f -= FRACT_MAX;
    m += 1;
  }
...rmv */

  f += FRACT_INC;
 506:	26 e0       	ldi	r18, 0x06	; 6
 508:	23 0f       	add	r18, r19
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/wiring.c:104

  if (f >= FRACT_MAX)
 50a:	2d 37       	cpi	r18, 0x7D	; 125
 50c:	68 f1       	brcs	.+90     	; 0x568 <__vector_11+0x8c>
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/wiring.c:106
  {
    f -= FRACT_MAX;
 50e:	29 e8       	ldi	r18, 0x89	; 137
 510:	23 0f       	add	r18, r19
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/wiring.c:107
    m = m + MILLIS_INC + 1;
 512:	03 96       	adiw	r24, 0x03	; 3
 514:	a1 1d       	adc	r26, r1
 516:	b1 1d       	adc	r27, r1
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/wiring.c:114
  else
  {
    m += MILLIS_INC;
  }

  millis_timer_fract = f;
 518:	20 93 28 01 	sts	0x0128, r18	; 0x800128 <__data_end>
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/wiring.c:115
  millis_timer_millis = m;
 51c:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <millis_timer_millis>
 520:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <millis_timer_millis+0x1>
 524:	a0 93 2b 01 	sts	0x012B, r26	; 0x80012b <millis_timer_millis+0x2>
 528:	b0 93 2c 01 	sts	0x012C, r27	; 0x80012c <millis_timer_millis+0x3>
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/wiring.c:116
  millis_timer_overflow_count++;
 52c:	80 91 2d 01 	lds	r24, 0x012D	; 0x80012d <millis_timer_overflow_count>
 530:	90 91 2e 01 	lds	r25, 0x012E	; 0x80012e <millis_timer_overflow_count+0x1>
 534:	a0 91 2f 01 	lds	r26, 0x012F	; 0x80012f <millis_timer_overflow_count+0x2>
 538:	b0 91 30 01 	lds	r27, 0x0130	; 0x800130 <millis_timer_overflow_count+0x3>
 53c:	01 96       	adiw	r24, 0x01	; 1
 53e:	a1 1d       	adc	r26, r1
 540:	b1 1d       	adc	r27, r1
 542:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <millis_timer_overflow_count>
 546:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <millis_timer_overflow_count+0x1>
 54a:	a0 93 2f 01 	sts	0x012F, r26	; 0x80012f <millis_timer_overflow_count+0x2>
 54e:	b0 93 30 01 	sts	0x0130, r27	; 0x800130 <millis_timer_overflow_count+0x3>
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/wiring.c:117
}
 552:	bf 91       	pop	r27
 554:	af 91       	pop	r26
 556:	9f 91       	pop	r25
 558:	8f 91       	pop	r24
 55a:	3f 91       	pop	r19
 55c:	2f 91       	pop	r18
 55e:	0f 90       	pop	r0
 560:	0f be       	out	0x3f, r0	; 63
 562:	0f 90       	pop	r0
 564:	1f 90       	pop	r1
 566:	18 95       	reti
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/wiring.c:111
    f -= FRACT_MAX;
    m = m + MILLIS_INC + 1;
  }
  else
  {
    m += MILLIS_INC;
 568:	02 96       	adiw	r24, 0x02	; 2
 56a:	a1 1d       	adc	r26, r1
 56c:	b1 1d       	adc	r27, r1
 56e:	d4 cf       	rjmp	.-88     	; 0x518 <__vector_11+0x3c>

00000570 <main>:
main():
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/wiring.c:572
  #else
  CLKPR=1<<CLKPCE; //enable change of protected register
  #endif
  CLKPR=1; //prescale by 2 for 4MHz
  #endif
  sei();
 570:	78 94       	sei
Timer0_SetWaveformGenerationMode():
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/core_timers.h:140
}
timer0_wgm_t;

__attribute__((always_inline)) static inline void Timer0_SetWaveformGenerationMode( timer0_wgm_t wgm )
{
  TCCR0A = (TCCR0A & ~MASK2(WGM01,WGM00)) | (((wgm & B011) >> 0) << WGM00);
 572:	80 b7       	in	r24, 0x30	; 48
 574:	83 60       	ori	r24, 0x03	; 3
 576:	80 bf       	out	0x30, r24	; 48
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/core_timers.h:141
  TCCR0B = (TCCR0B & ~MASK1(WGM02))       | (((wgm & B100) >> 2) << WGM02);
 578:	83 b7       	in	r24, 0x33	; 51
 57a:	87 7f       	andi	r24, 0xF7	; 247
 57c:	83 bf       	out	0x33, r24	; 51
Timer0_ClockSelect():
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/core_timers.h:122
}
timer0_cs_t;

__attribute__((always_inline)) static inline void Timer0_ClockSelect( timer0_cs_t cs )
{
  TCCR0B = (TCCR0B & ~MASK3(CS02,CS01,CS00)) | (cs << CS00);
 57e:	83 b7       	in	r24, 0x33	; 51
 580:	88 7f       	andi	r24, 0xF8	; 248
 582:	83 60       	ori	r24, 0x03	; 3
 584:	83 bf       	out	0x33, r24	; 51
Timer0_EnableOverflowInterrupt():
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/core_timers.h:198
  TIMSK0 |= (1<<OCIE0A);
}

__attribute__((always_inline)) static inline void Timer0_EnableOverflowInterrupt( void )
{
  TIMSK0 |= (1<<TOIE0);
 586:	89 b7       	in	r24, 0x39	; 57
 588:	81 60       	ori	r24, 0x01	; 1
 58a:	89 bf       	out	0x39, r24	; 57
Timer2_ClockSelect():
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/core_timers.h:470
}
timer2_cs_t;

__attribute__((always_inline)) static inline void Timer2_ClockSelect( timer2_cs_t cs )
{
  TCCR2B = (TCCR2B & ~MASK3(CS22,CS21,CS20)) | (cs << CS20);
 58c:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__DATA_REGION_ORIGIN__+0x69>
 590:	88 7f       	andi	r24, 0xF8	; 248
 592:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__DATA_REGION_ORIGIN__+0x69>
Timer2_SetWaveformGenerationMode():
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/core_timers.h:496
}
timer2_wgm_t;

__attribute__((always_inline)) static inline void Timer2_SetWaveformGenerationMode( timer2_wgm_t wgm )
{
  TCCR2A = (TCCR2A & ~MASK2(WGM21,WGM20)) | (((wgm & B0011) >> 0) << WGM20);
 596:	80 91 ca 00 	lds	r24, 0x00CA	; 0x8000ca <__DATA_REGION_ORIGIN__+0x6a>
 59a:	8c 7f       	andi	r24, 0xFC	; 252
 59c:	81 60       	ori	r24, 0x01	; 1
 59e:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__DATA_REGION_ORIGIN__+0x6a>
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/core_timers.h:497
  TCCR2B = (TCCR2B & ~MASK2(WGM23,WGM22)) | (((wgm & B1100) >> 2) << WGM22);
 5a2:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__DATA_REGION_ORIGIN__+0x69>
 5a6:	87 7e       	andi	r24, 0xE7	; 231
 5a8:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__DATA_REGION_ORIGIN__+0x69>
Timer2_ClockSelect():
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/core_timers.h:470
}
timer2_cs_t;

__attribute__((always_inline)) static inline void Timer2_ClockSelect( timer2_cs_t cs )
{
  TCCR2B = (TCCR2B & ~MASK3(CS22,CS21,CS20)) | (cs << CS20);
 5ac:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__DATA_REGION_ORIGIN__+0x69>
 5b0:	88 7f       	andi	r24, 0xF8	; 248
 5b2:	83 60       	ori	r24, 0x03	; 3
 5b4:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__DATA_REGION_ORIGIN__+0x69>
Timer1_ClockSelect():
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/core_timers.h:282
}
timer1_cs_t;

__attribute__((always_inline)) static inline void Timer1_ClockSelect( timer1_cs_t cs )
{
  TCCR1B = (TCCR1B & ~MASK3(CS12,CS11,CS10)) | (cs << CS10);
 5b8:	8e b5       	in	r24, 0x2e	; 46
 5ba:	88 7f       	andi	r24, 0xF8	; 248
 5bc:	8e bd       	out	0x2e, r24	; 46
Timer1_SetWaveformGenerationMode():
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/core_timers.h:308
}
timer1_wgm_t;

__attribute__((always_inline)) static inline void Timer1_SetWaveformGenerationMode( timer1_wgm_t wgm )
{
  TCCR1A = (TCCR1A & ~MASK2(WGM11,WGM10)) | (((wgm & B0011) >> 0) << WGM10);
 5be:	8f b5       	in	r24, 0x2f	; 47
 5c0:	8c 7f       	andi	r24, 0xFC	; 252
 5c2:	81 60       	ori	r24, 0x01	; 1
 5c4:	8f bd       	out	0x2f, r24	; 47
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/core_timers.h:309
  TCCR1B = (TCCR1B & ~MASK2(WGM13,WGM12)) | (((wgm & B1100) >> 2) << WGM12);
 5c6:	8e b5       	in	r24, 0x2e	; 46
 5c8:	87 7e       	andi	r24, 0xE7	; 231
 5ca:	8e bd       	out	0x2e, r24	; 46
Timer1_ClockSelect():
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/core_timers.h:282
}
timer1_cs_t;

__attribute__((always_inline)) static inline void Timer1_ClockSelect( timer1_cs_t cs )
{
  TCCR1B = (TCCR1B & ~MASK3(CS12,CS11,CS10)) | (cs << CS10);
 5cc:	8e b5       	in	r24, 0x2e	; 46
 5ce:	88 7f       	andi	r24, 0xF8	; 248
 5d0:	83 60       	ori	r24, 0x03	; 3
 5d2:	8e bd       	out	0x2e, r24	; 46
initTimer841():
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/wiring.c:468
  Timer1_SetWaveformGenerationMode(1);
  Timer1_ClockSelect(3);

  #endif

  TOCPMSA0=0b00010000;
 5d4:	80 e1       	ldi	r24, 0x10	; 16
 5d6:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <__DATA_REGION_ORIGIN__+0x7>
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/wiring.c:469
  TOCPMSA1=0b10100100;
 5da:	84 ea       	ldi	r24, 0xA4	; 164
 5dc:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/wiring.c:470
  TOCPMCOE=0b11111100;
 5e0:	8c ef       	ldi	r24, 0xFC	; 252
 5e2:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
ADC_PrescalerSelect():
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/core_adc.h:89
}
adc_ps_t;

__attribute__((always_inline)) static inline void ADC_PrescalerSelect( adc_ps_t ps )
{
  ADCSRA = (ADCSRA & ~MASK3(ADPS2,ADPS1,ADPS0)) | (ps << ADPS0);
 5e6:	85 b1       	in	r24, 0x05	; 5
 5e8:	88 7f       	andi	r24, 0xF8	; 248
 5ea:	86 60       	ori	r24, 0x06	; 6
 5ec:	85 b9       	out	0x05, r24	; 5
ADC_Enable():
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/core_adc.h:94
}

__attribute__((always_inline)) static inline void ADC_Enable( void )
{
  ADCSRA |= MASK1( ADEN );
 5ee:	2f 9a       	sbi	0x05, 7	; 5
pinMode():
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/wiring_digital.c:41
void pinMode(uint8_t pin, uint8_t mode)
{
  #ifndef __AVR_ATtiny828__
  if (pin&64) {pin=analogInputToDigitalPin((pin & 63));}
  #endif
  uint8_t bit = digitalPinToBitMask(pin);
 5f0:	e4 e4       	ldi	r30, 0x44	; 68
 5f2:	f0 e0       	ldi	r31, 0x00	; 0
 5f4:	e4 91       	lpm	r30, Z
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/wiring_digital.c:67
    *reg &= ~bit;
    *out |= bit;
    *pue |= bit;
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
 5f6:	9f b7       	in	r25, 0x3f	; 63
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/wiring_digital.c:68
                cli();
 5f8:	f8 94       	cli
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/wiring_digital.c:69
    *pue &= ~bit;
 5fa:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 5fe:	8e 2f       	mov	r24, r30
 600:	80 95       	com	r24
 602:	82 23       	and	r24, r18
 604:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/wiring_digital.c:70
    *reg |= bit;
 608:	87 b3       	in	r24, 0x17	; 23
 60a:	e8 2b       	or	r30, r24
 60c:	e7 bb       	out	0x17, r30	; 23
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/wiring_digital.c:71
    SREG = oldSREG;
 60e:	9f bf       	out	0x3f, r25	; 63
begin():
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/HardwareSerial.cpp:121

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
 610:	e0 91 50 01 	lds	r30, 0x0150	; 0x800150 <Serial+0x10>
 614:	f0 91 51 01 	lds	r31, 0x0151	; 0x800151 <Serial+0x11>
 618:	82 e0       	ldi	r24, 0x02	; 2
 61a:	80 83       	st	Z, r24
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/HardwareSerial.cpp:135
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 61c:	e0 91 4c 01 	lds	r30, 0x014C	; 0x80014c <Serial+0xc>
 620:	f0 91 4d 01 	lds	r31, 0x014D	; 0x80014d <Serial+0xd>
 624:	10 82       	st	Z, r1
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/HardwareSerial.cpp:136
  *_ubrrl = baud_setting;
 626:	e0 91 4e 01 	lds	r30, 0x014E	; 0x80014e <Serial+0xe>
 62a:	f0 91 4f 01 	lds	r31, 0x014F	; 0x80014f <Serial+0xf>
 62e:	10 82       	st	Z, r1
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/HardwareSerial.cpp:138

  _written = false;
 630:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <Serial+0x18>
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/HardwareSerial.cpp:144

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
 634:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <Serial+0x14>
 638:	f0 91 55 01 	lds	r31, 0x0155	; 0x800155 <Serial+0x15>
 63c:	86 e0       	ldi	r24, 0x06	; 6
 63e:	80 83       	st	Z, r24
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/HardwareSerial.cpp:146

  sbi(*_ucsrb, RXEN0);
 640:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <Serial+0x12>
 644:	f0 91 53 01 	lds	r31, 0x0153	; 0x800153 <Serial+0x13>
 648:	80 81       	ld	r24, Z
 64a:	80 61       	ori	r24, 0x10	; 16
 64c:	80 83       	st	Z, r24
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/HardwareSerial.cpp:147
  sbi(*_ucsrb, TXEN0);
 64e:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <Serial+0x12>
 652:	f0 91 53 01 	lds	r31, 0x0153	; 0x800153 <Serial+0x13>
 656:	80 81       	ld	r24, Z
 658:	88 60       	ori	r24, 0x08	; 8
 65a:	80 83       	st	Z, r24
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/HardwareSerial.cpp:148
  sbi(*_ucsrb, RXCIE0);
 65c:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <Serial+0x12>
 660:	f0 91 53 01 	lds	r31, 0x0153	; 0x800153 <Serial+0x13>
 664:	80 81       	ld	r24, Z
 666:	80 68       	ori	r24, 0x80	; 128
 668:	80 83       	st	Z, r24
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/HardwareSerial.cpp:149
  cbi(*_ucsrb, UDRIE0);
 66a:	e0 91 52 01 	lds	r30, 0x0152	; 0x800152 <Serial+0x12>
 66e:	f0 91 53 01 	lds	r31, 0x0153	; 0x800153 <Serial+0x13>
 672:	80 81       	ld	r24, Z
 674:	8f 7d       	andi	r24, 0xDF	; 223
 676:	80 83       	st	Z, r24
setup():
D:\Github\CWT-clapper\clapper9/clapper9.ino:75
  // For debug info
  Serial.begin( 1000000  );

  // Set up ADC

  ADMUXA = 0b001101;    // Read the internal 1.1 reference. Datasheet 16.13.1
 678:	8d e0       	ldi	r24, 0x0D	; 13
 67a:	89 b9       	out	0x09, r24	; 9
D:\Github\CWT-clapper\clapper9/clapper9.ino:76
  ADMUXB = 0x00;         // Against the Vcc
 67c:	18 b8       	out	0x08, r1	; 8
D:\Github\CWT-clapper\clapper9/clapper9.ino:78

  ADCSRA = 0b10000111;    // Enable ADC, No autotrigger or interrupt, divide by 32 (gives 250Khz @ 8Mhz clock). We are suppoed to be less than 200Khz, but should be ok. 
 67e:	87 e8       	ldi	r24, 0x87	; 135
 680:	85 b9       	out	0x05, r24	; 5
motorOn():
D:\Github\CWT-clapper\clapper9/clapper9.ino:57


#define MOTOR 8     // Motor MOSFET pin

void motorOn(){
  digitalWrite(MOTOR, HIGH);  
 682:	81 e0       	ldi	r24, 0x01	; 1
 684:	08 dd       	rcall	.-1520   	; 0x96 <digitalWrite.constprop.19>
loop():
D:\Github\CWT-clapper\clapper9/clapper9.ino:127
}

void loop()
{

  if (millis() >= next_sample) {
 686:	6d de       	rcall	.-806    	; 0x362 <millis>
 688:	c0 90 3c 01 	lds	r12, 0x013C	; 0x80013c <next_sample>
 68c:	d0 90 3d 01 	lds	r13, 0x013D	; 0x80013d <next_sample+0x1>
 690:	e0 90 3e 01 	lds	r14, 0x013E	; 0x80013e <next_sample+0x2>
 694:	f0 90 3f 01 	lds	r15, 0x013F	; 0x80013f <next_sample+0x3>
 698:	6c 15       	cp	r22, r12
 69a:	7d 05       	cpc	r23, r13
 69c:	8e 05       	cpc	r24, r14
 69e:	9f 05       	cpc	r25, r15
 6a0:	90 f3       	brcs	.-28     	; 0x686 <main+0x116>
D:\Github\CWT-clapper\clapper9/clapper9.ino:131

    //next_sample +=  SAMPLE_PERIOD_MS;     // Make sure nothing in loop takes more than 100ms!

    next_sample =  millis()+SAMPLE_PERIOD_MS;     // Do it this way for testing so we can have delay()s in there. 
 6a2:	5f de       	rcall	.-834    	; 0x362 <millis>
 6a4:	6f 5f       	subi	r22, 0xFF	; 255
 6a6:	7f 4f       	sbci	r23, 0xFF	; 255
 6a8:	8f 4f       	sbci	r24, 0xFF	; 255
 6aa:	9f 4f       	sbci	r25, 0xFF	; 255
 6ac:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <next_sample>
 6b0:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <next_sample+0x1>
 6b4:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <next_sample+0x2>
 6b8:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <next_sample+0x3>
readADC():
D:\Github\CWT-clapper\clapper9/clapper9.ino:112
                                     // Remember that our sample window is 100ms, so we need at least double that to avoid overrun


byte readADC() {

    ADCSRA |= _BV( ADSC );    // Start the conversion    
 6bc:	2e 9a       	sbi	0x05, 6	; 5
D:\Github\CWT-clapper\clapper9/clapper9.ino:114

    while ( ADCSRA &  _BV( ADSC ) );      // Wait for bit to clear (indicates conversion done)
 6be:	2e 99       	sbic	0x05, 6	; 5
 6c0:	fe cf       	rjmp	.-4      	; 0x6be <main+0x14e>
D:\Github\CWT-clapper\clapper9/clapper9.ino:116

    const uint8_t a = (uint8_t) ADC;                     // Read conversion result. 
 6c2:	86 b1       	in	r24, 0x06	; 6
 6c4:	97 b1       	in	r25, 0x07	; 7
loop():
D:\Github\CWT-clapper\clapper9/clapper9.ino:135

    next_sample =  millis()+SAMPLE_PERIOD_MS;     // Do it this way for testing so we can have delay()s in there. 
    
    const byte a=readADC(); 

    curr_window_total += a;      // Accumulate the readings for this window
 6c6:	20 91 3a 01 	lds	r18, 0x013A	; 0x80013a <curr_window_total>
 6ca:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <curr_window_total+0x1>
 6ce:	82 0f       	add	r24, r18
 6d0:	93 2f       	mov	r25, r19
 6d2:	91 1d       	adc	r25, r1
 6d4:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <curr_window_total+0x1>
 6d8:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <curr_window_total>
D:\Github\CWT-clapper\clapper9/clapper9.ino:137
    
    curr_window_sample_count++;
 6dc:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <curr_window_sample_count>
 6e0:	8f 5f       	subi	r24, 0xFF	; 255
 6e2:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <curr_window_sample_count>
D:\Github\CWT-clapper\clapper9/clapper9.ino:138
    if (curr_window_sample_count >= SAMPLE_COUNT_PER_WINDOW) {
 6e6:	84 36       	cpi	r24, 0x64	; 100
 6e8:	70 f2       	brcs	.-100    	; 0x686 <main+0x116>
D:\Github\CWT-clapper\clapper9/clapper9.ino:142

      // End of current window

      Serial.print( millis() );
 6ea:	3b de       	rcall	.-906    	; 0x362 <millis>
print():
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/Print.cpp:103
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 6ec:	4a e0       	ldi	r20, 0x0A	; 10
 6ee:	51 de       	rcall	.-862    	; 0x392 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.16]>
write():
 6f0:	86 e1       	ldi	r24, 0x16	; 22
 6f2:	91 e0       	ldi	r25, 0x01	; 1
 6f4:	42 de       	rcall	.-892    	; 0x37a <Print::write(char const*) [clone .part.2] [clone .constprop.18]>
print():
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/Print.cpp:81
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
 6f6:	60 91 3a 01 	lds	r22, 0x013A	; 0x80013a <curr_window_total>
 6fa:	70 91 3b 01 	lds	r23, 0x013B	; 0x80013b <curr_window_total+0x1>
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/Print.cpp:103
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 702:	4a e0       	ldi	r20, 0x0A	; 10
 704:	46 de       	rcall	.-884    	; 0x392 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.16]>
write():
 706:	86 e1       	ldi	r24, 0x16	; 22
 708:	91 e0       	ldi	r25, 0x01	; 1
 70a:	37 de       	rcall	.-914    	; 0x37a <Print::write(char const*) [clone .part.2] [clone .constprop.18]>
print():
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/Print.cpp:81
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
 70c:	60 91 37 01 	lds	r22, 0x0137	; 0x800137 <prev1_window_total>
 710:	70 91 38 01 	lds	r23, 0x0138	; 0x800138 <prev1_window_total+0x1>
 714:	90 e0       	ldi	r25, 0x00	; 0
 716:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/Print.cpp:103
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 718:	4a e0       	ldi	r20, 0x0A	; 10
 71a:	3b de       	rcall	.-906    	; 0x392 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.16]>
write():
 71c:	86 e1       	ldi	r24, 0x16	; 22
 71e:	91 e0       	ldi	r25, 0x01	; 1
 720:	2c de       	rcall	.-936    	; 0x37a <Print::write(char const*) [clone .part.2] [clone .constprop.18]>
print():
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/Print.cpp:81
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
 722:	60 91 35 01 	lds	r22, 0x0135	; 0x800135 <prev2_window_total>
 726:	70 91 36 01 	lds	r23, 0x0136	; 0x800136 <prev2_window_total+0x1>
 72a:	90 e0       	ldi	r25, 0x00	; 0
 72c:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/Print.cpp:103
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 72e:	4a e0       	ldi	r20, 0x0A	; 10
 730:	30 de       	rcall	.-928    	; 0x392 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.16]>
write():
 732:	86 e1       	ldi	r24, 0x16	; 22
 734:	91 e0       	ldi	r25, 0x01	; 1
 736:	21 de       	rcall	.-958    	; 0x37a <Print::write(char const*) [clone .part.2] [clone .constprop.18]>
loop():
D:\Github\CWT-clapper\clapper9/clapper9.ino:154
      Serial.print( prev2_window_total );
      Serial.print(" ");

      // Did we go down since the dopo previous window?

      if ( curr_window_total < prev2_window_total)  {
 738:	20 91 3a 01 	lds	r18, 0x013A	; 0x80013a <curr_window_total>
 73c:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <curr_window_total+0x1>
 740:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <prev2_window_total>
 744:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <prev2_window_total+0x1>
 748:	28 17       	cp	r18, r24
 74a:	39 07       	cpc	r19, r25
 74c:	08 f0       	brcs	.+2      	; 0x750 <main+0x1e0>
 74e:	52 c0       	rjmp	.+164    	; 0x7f4 <main+0x284>
D:\Github\CWT-clapper\clapper9/clapper9.ino:159

        // Did we go down by more than the threshold?
        
        
        if  ( (prev2_window_total - curr_window_total) > SAMPLE_THRESHOLD )  {
 750:	82 1b       	sub	r24, r18
 752:	93 0b       	sbc	r25, r19
 754:	85 36       	cpi	r24, 0x65	; 101
 756:	91 05       	cpc	r25, r1
 758:	08 f4       	brcc	.+2      	; 0x75c <main+0x1ec>
 75a:	4c c0       	rjmp	.+152    	; 0x7f4 <main+0x284>
D:\Github\CWT-clapper\clapper9/clapper9.ino:161

              long unsigned this_clap_time = millis(); 
 75c:	02 de       	rcall	.-1020   	; 0x362 <millis>
 75e:	6b 01       	movw	r12, r22
motorOff():
D:\Github\CWT-clapper\clapper9/clapper9.ino:61
void motorOn(){
  digitalWrite(MOTOR, HIGH);  
}

void motorOff(){
  digitalWrite(MOTOR, LOW);  
 760:	80 e0       	ldi	r24, 0x00	; 0
 762:	99 dc       	rcall	.-1742   	; 0x96 <digitalWrite.constprop.19>
write():
 764:	82 e1       	ldi	r24, 0x12	; 18
 766:	91 e0       	ldi	r25, 0x01	; 1
 768:	08 de       	rcall	.-1008   	; 0x37a <Print::write(char const*) [clone .part.2] [clone .constprop.18]>
loop():
D:\Github\CWT-clapper\clapper9/clapper9.ino:173
                // (This is just in here for testing.) 
                motorOff();
  
                Serial.print("CLAP ");
  
                Serial.print(prev2_window_total - curr_window_total);              
 76a:	60 91 35 01 	lds	r22, 0x0135	; 0x800135 <prev2_window_total>
 76e:	70 91 36 01 	lds	r23, 0x0136	; 0x800136 <prev2_window_total+0x1>
 772:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <curr_window_total>
 776:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <curr_window_total+0x1>
 77a:	68 1b       	sub	r22, r24
 77c:	79 0b       	sbc	r23, r25
print():
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/Print.cpp:81
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
 77e:	90 e0       	ldi	r25, 0x00	; 0
 780:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/Print.cpp:103
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 782:	4a e0       	ldi	r20, 0x0A	; 10
 784:	06 de       	rcall	.-1012   	; 0x392 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.16]>
write():
 786:	86 e1       	ldi	r24, 0x16	; 22
 788:	91 e0       	ldi	r25, 0x01	; 1
 78a:	f7 dd       	rcall	.-1042   	; 0x37a <Print::write(char const*) [clone .part.2] [clone .constprop.18]>
loop():
D:\Github\CWT-clapper\clapper9/clapper9.ino:177
                
                Serial.print(" ");
  
                const unsigned clap_period = this_clap_time - last_clap_time;
 78c:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <last_clap_time>
 790:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <last_clap_time+0x1>
 794:	c8 1a       	sub	r12, r24
 796:	d9 0a       	sbc	r13, r25
D:\Github\CWT-clapper\clapper9/clapper9.ino:182
  
                // Next time we should stop- aim for backoff-time before the next clap
                // next_stop_time = this_clap_time + clap_period  - CLAP_BACKOFF_TIME_MS;
  
                Serial.print( clap_period/1000.0  );
 798:	b6 01       	movw	r22, r12
 79a:	90 e0       	ldi	r25, 0x00	; 0
 79c:	80 e0       	ldi	r24, 0x00	; 0
 79e:	f0 d1       	rcall	.+992    	; 0xb80 <__floatunsisf>
 7a0:	20 e0       	ldi	r18, 0x00	; 0
 7a2:	30 e0       	ldi	r19, 0x00	; 0
 7a4:	4a e7       	ldi	r20, 0x7A	; 122
 7a6:	54 e4       	ldi	r21, 0x44	; 68
 7a8:	52 d1       	rcall	.+676    	; 0xa4e <__divsf3>
 7aa:	6b 01       	movw	r12, r22
 7ac:	7c 01       	movw	r14, r24
printFloat():
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/Print.cpp:253

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
 7ae:	ac 01       	movw	r20, r24
 7b0:	9b 01       	movw	r18, r22
 7b2:	07 d3       	rcall	.+1550   	; 0xdc2 <__unordsf2>
 7b4:	88 23       	and	r24, r24
 7b6:	c1 f1       	breq	.+112    	; 0x828 <main+0x2b8>
write():
 7b8:	88 e1       	ldi	r24, 0x18	; 24
 7ba:	91 e0       	ldi	r25, 0x01	; 1
 7bc:	de dd       	rcall	.-1092   	; 0x37a <Print::write(char const*) [clone .part.2] [clone .constprop.18]>
loop():
D:\Github\CWT-clapper\clapper9/clapper9.ino:185
  
                
                delay(1000);
 7be:	a3 dd       	rcall	.-1210   	; 0x306 <delay.constprop.4>
motorOn():
D:\Github\CWT-clapper\clapper9/clapper9.ino:57


#define MOTOR 8     // Motor MOSFET pin

void motorOn(){
  digitalWrite(MOTOR, HIGH);  
 7c0:	81 e0       	ldi	r24, 0x01	; 1
 7c2:	69 dc       	rcall	.-1838   	; 0x96 <digitalWrite.constprop.19>
loop():
D:\Github\CWT-clapper\clapper9/clapper9.ino:187
                Serial.print( clap_period/1000.0  );
  
                
                delay(1000);
                motorOn();
                this_clap_time = millis();               // Adjust for the fact that we stopped. 
 7c4:	ce dd       	rcall	.-1124   	; 0x362 <millis>
 7c6:	6b 01       	movw	r12, r22
 7c8:	7c 01       	movw	r14, r24
D:\Github\CWT-clapper\clapper9/clapper9.ino:188
                delay(1000);      // warm up motor
 7ca:	9d dd       	rcall	.-1222   	; 0x306 <delay.constprop.4>
D:\Github\CWT-clapper\clapper9/clapper9.ino:194
                

              } while (0);
              

              last_clap_time = this_clap_time;
 7cc:	c0 92 31 01 	sts	0x0131, r12	; 0x800131 <last_clap_time>
 7d0:	d0 92 32 01 	sts	0x0132, r13	; 0x800132 <last_clap_time+0x1>
 7d4:	e0 92 33 01 	sts	0x0133, r14	; 0x800133 <last_clap_time+0x2>
 7d8:	f0 92 34 01 	sts	0x0134, r15	; 0x800134 <last_clap_time+0x3>
D:\Github\CWT-clapper\clapper9/clapper9.ino:197
              
              // A hacky way to get us a 2 window-period hold-off 
              prev2_window_total = 0;
 7dc:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <prev2_window_total+0x1>
 7e0:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <prev2_window_total>
D:\Github\CWT-clapper\clapper9/clapper9.ino:198
              prev1_window_total = 0;
 7e4:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <prev1_window_total+0x1>
 7e8:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <prev1_window_total>
D:\Github\CWT-clapper\clapper9/clapper9.ino:199
              curr_window_total = 0;
 7ec:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <curr_window_total+0x1>
 7f0:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <curr_window_total>
write():
 7f4:	86 e2       	ldi	r24, 0x26	; 38
 7f6:	91 e0       	ldi	r25, 0x01	; 1
 7f8:	c0 dd       	rcall	.-1152   	; 0x37a <Print::write(char const*) [clone .part.2] [clone .constprop.18]>
loop():
D:\Github\CWT-clapper\clapper9/clapper9.ino:208
      }

      Serial.print("\n");

      // Bucket bridage the samples down
      prev2_window_total = prev1_window_total;
 7fa:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <prev1_window_total>
 7fe:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <prev1_window_total+0x1>
 802:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <prev2_window_total+0x1>
 806:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <prev2_window_total>
D:\Github\CWT-clapper\clapper9/clapper9.ino:209
      prev1_window_total = curr_window_total;
 80a:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <curr_window_total>
 80e:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <curr_window_total+0x1>
 812:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <prev1_window_total+0x1>
 816:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <prev1_window_total>
D:\Github\CWT-clapper\clapper9/clapper9.ino:210
      curr_window_total = 0;
 81a:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <curr_window_total+0x1>
 81e:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <curr_window_total>
D:\Github\CWT-clapper\clapper9/clapper9.ino:211
      curr_window_sample_count=0;
 822:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <curr_window_sample_count>
 826:	2f cf       	rjmp	.-418    	; 0x686 <main+0x116>
printFloat():
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/Print.cpp:254
  if (isinf(number)) return print("inf");
 828:	2f ef       	ldi	r18, 0xFF	; 255
 82a:	3f ef       	ldi	r19, 0xFF	; 255
 82c:	4f e7       	ldi	r20, 0x7F	; 127
 82e:	5f e7       	ldi	r21, 0x7F	; 127
 830:	c7 01       	movw	r24, r14
 832:	b6 01       	movw	r22, r12
 834:	c6 d2       	rcall	.+1420   	; 0xdc2 <__unordsf2>
 836:	81 11       	cpse	r24, r1
 838:	0c c0       	rjmp	.+24     	; 0x852 <main+0x2e2>
 83a:	2f ef       	ldi	r18, 0xFF	; 255
 83c:	3f ef       	ldi	r19, 0xFF	; 255
 83e:	4f e7       	ldi	r20, 0x7F	; 127
 840:	5f e7       	ldi	r21, 0x7F	; 127
 842:	c7 01       	movw	r24, r14
 844:	b6 01       	movw	r22, r12
 846:	ff d0       	rcall	.+510    	; 0xa46 <__cmpsf2>
 848:	18 16       	cp	r1, r24
 84a:	1c f4       	brge	.+6      	; 0x852 <main+0x2e2>
write():
 84c:	8c e1       	ldi	r24, 0x1C	; 28
 84e:	91 e0       	ldi	r25, 0x01	; 1
 850:	b5 cf       	rjmp	.-150    	; 0x7bc <main+0x24c>
printFloat():
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/Print.cpp:255
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 852:	2f ef       	ldi	r18, 0xFF	; 255
 854:	3f ef       	ldi	r19, 0xFF	; 255
 856:	4f e7       	ldi	r20, 0x7F	; 127
 858:	5f e4       	ldi	r21, 0x4F	; 79
 85a:	c7 01       	movw	r24, r14
 85c:	b6 01       	movw	r22, r12
 85e:	42 d2       	rcall	.+1156   	; 0xce4 <__gesf2>
 860:	18 16       	cp	r1, r24
 862:	1c f4       	brge	.+6      	; 0x86a <main+0x2fa>
write():
 864:	80 e2       	ldi	r24, 0x20	; 32
 866:	91 e0       	ldi	r25, 0x01	; 1
 868:	a9 cf       	rjmp	.-174    	; 0x7bc <main+0x24c>
printFloat():
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/Print.cpp:256
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 86a:	2f ef       	ldi	r18, 0xFF	; 255
 86c:	3f ef       	ldi	r19, 0xFF	; 255
 86e:	4f e7       	ldi	r20, 0x7F	; 127
 870:	5f ec       	ldi	r21, 0xCF	; 207
 872:	c7 01       	movw	r24, r14
 874:	b6 01       	movw	r22, r12
 876:	e7 d0       	rcall	.+462    	; 0xa46 <__cmpsf2>
 878:	87 fd       	sbrc	r24, 7
 87a:	f4 cf       	rjmp	.-24     	; 0x864 <main+0x2f4>
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/Print.cpp:270
  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    rounding /= 10.0;

  number += rounding;
 87c:	2a e0       	ldi	r18, 0x0A	; 10
 87e:	37 ed       	ldi	r19, 0xD7	; 215
 880:	43 ea       	ldi	r20, 0xA3	; 163
 882:	5b e3       	ldi	r21, 0x3B	; 59
 884:	c7 01       	movw	r24, r14
 886:	b6 01       	movw	r22, r12
 888:	7a d0       	rcall	.+244    	; 0x97e <__addsf3>
 88a:	6b 01       	movw	r12, r22
 88c:	7c 01       	movw	r14, r24
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/Print.cpp:273

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 88e:	4c d1       	rcall	.+664    	; 0xb28 <__fixunssfsi>
 890:	4b 01       	movw	r8, r22
 892:	5c 01       	movw	r10, r24
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/Print.cpp:274
  double remainder = number - (double)int_part;
 894:	75 d1       	rcall	.+746    	; 0xb80 <__floatunsisf>
 896:	9b 01       	movw	r18, r22
 898:	ac 01       	movw	r20, r24
 89a:	c7 01       	movw	r24, r14
 89c:	b6 01       	movw	r22, r12
 89e:	6e d0       	rcall	.+220    	; 0x97c <__subsf3>
 8a0:	6b 01       	movw	r12, r22
 8a2:	7c 01       	movw	r14, r24
print():
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/Print.cpp:103
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 8a4:	4a e0       	ldi	r20, 0x0A	; 10
 8a6:	c5 01       	movw	r24, r10
 8a8:	b4 01       	movw	r22, r8
 8aa:	73 dd       	rcall	.-1306   	; 0x392 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.16]>
write():
 8ac:	84 e2       	ldi	r24, 0x24	; 36
 8ae:	91 e0       	ldi	r25, 0x01	; 1
 8b0:	64 dd       	rcall	.-1336   	; 0x37a <Print::write(char const*) [clone .part.2] [clone .constprop.18]>
 8b2:	c3 e0       	ldi	r28, 0x03	; 3
 8b4:	c1 50       	subi	r28, 0x01	; 1
printFloat():
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/Print.cpp:283
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 8b6:	09 f4       	brne	.+2      	; 0x8ba <main+0x34a>
 8b8:	82 cf       	rjmp	.-252    	; 0x7be <main+0x24e>
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/Print.cpp:285
  {
    remainder *= 10.0;
 8ba:	20 e0       	ldi	r18, 0x00	; 0
 8bc:	30 e0       	ldi	r19, 0x00	; 0
 8be:	40 e2       	ldi	r20, 0x20	; 32
 8c0:	51 e4       	ldi	r21, 0x41	; 65
 8c2:	c7 01       	movw	r24, r14
 8c4:	b6 01       	movw	r22, r12
 8c6:	12 d2       	rcall	.+1060   	; 0xcec <__mulsf3>
 8c8:	4b 01       	movw	r8, r22
 8ca:	5c 01       	movw	r10, r24
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/Print.cpp:286
    int toPrint = int(remainder);
 8cc:	28 d1       	rcall	.+592    	; 0xb1e <__fixsfsi>
print():
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/Print.cpp:76
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 8ce:	6b 01       	movw	r12, r22
 8d0:	77 0f       	add	r23, r23
 8d2:	ee 08       	sbc	r14, r14
 8d4:	ff 08       	sbc	r15, r15
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/Print.cpp:94
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
 8d6:	4a e0       	ldi	r20, 0x0A	; 10
 8d8:	c7 01       	movw	r24, r14
 8da:	b6 01       	movw	r22, r12
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/Print.cpp:89
size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
 8dc:	f7 fe       	sbrs	r15, 7
 8de:	0c c0       	rjmp	.+24     	; 0x8f8 <main+0x388>
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/Print.cpp:66
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 8e0:	6d e2       	ldi	r22, 0x2D	; 45
 8e2:	80 e4       	ldi	r24, 0x40	; 64
 8e4:	91 e0       	ldi	r25, 0x01	; 1
 8e6:	80 dc       	rcall	.-1792   	; 0x1e8 <HardwareSerial::write(unsigned char)>
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/Print.cpp:91
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
 8e8:	66 27       	eor	r22, r22
 8ea:	77 27       	eor	r23, r23
 8ec:	cb 01       	movw	r24, r22
 8ee:	6c 19       	sub	r22, r12
 8f0:	7d 09       	sbc	r23, r13
 8f2:	8e 09       	sbc	r24, r14
 8f4:	9f 09       	sbc	r25, r15
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/Print.cpp:92
      return printNumber(n, 10) + t;
 8f6:	4a e0       	ldi	r20, 0x0A	; 10
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/Print.cpp:94
    }
    return printNumber(n, 10);
 8f8:	4c dd       	rcall	.-1384   	; 0x392 <Print::printNumber(unsigned long, unsigned char) [clone .constprop.16]>
printFloat():
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/Print.cpp:288
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
 8fa:	c7 01       	movw	r24, r14
 8fc:	b6 01       	movw	r22, r12
 8fe:	42 d1       	rcall	.+644    	; 0xb84 <__floatsisf>
 900:	9b 01       	movw	r18, r22
 902:	ac 01       	movw	r20, r24
 904:	c5 01       	movw	r24, r10
 906:	b4 01       	movw	r22, r8
 908:	39 d0       	rcall	.+114    	; 0x97c <__subsf3>
 90a:	6b 01       	movw	r12, r22
 90c:	7c 01       	movw	r14, r24
 90e:	d2 cf       	rjmp	.-92     	; 0x8b4 <main+0x344>

00000910 <_GLOBAL__sub_I___vector_22>:
_ZN5PrintC2Ev():
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/Print.h:43
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 910:	e0 e4       	ldi	r30, 0x40	; 64
 912:	f1 e0       	ldi	r31, 0x01	; 1
 914:	13 82       	std	Z+3, r1	; 0x03
 916:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC2Ev():
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/Stream.h:64
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 918:	88 ee       	ldi	r24, 0xE8	; 232
 91a:	93 e0       	ldi	r25, 0x03	; 3
 91c:	a0 e0       	ldi	r26, 0x00	; 0
 91e:	b0 e0       	ldi	r27, 0x00	; 0
 920:	84 83       	std	Z+4, r24	; 0x04
 922:	95 83       	std	Z+5, r25	; 0x05
 924:	a6 83       	std	Z+6, r26	; 0x06
 926:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC2EPVhS1_S1_S1_S1_S1_():
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/HardwareSerial_private.h:95
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 928:	84 e0       	ldi	r24, 0x04	; 4
 92a:	91 e0       	ldi	r25, 0x01	; 1
 92c:	91 83       	std	Z+1, r25	; 0x01
 92e:	80 83       	st	Z, r24
 930:	82 e8       	ldi	r24, 0x82	; 130
 932:	90 e0       	ldi	r25, 0x00	; 0
 934:	95 87       	std	Z+13, r25	; 0x0d
 936:	84 87       	std	Z+12, r24	; 0x0c
 938:	81 e8       	ldi	r24, 0x81	; 129
 93a:	90 e0       	ldi	r25, 0x00	; 0
 93c:	97 87       	std	Z+15, r25	; 0x0f
 93e:	86 87       	std	Z+14, r24	; 0x0e
 940:	86 e8       	ldi	r24, 0x86	; 134
 942:	90 e0       	ldi	r25, 0x00	; 0
 944:	91 8b       	std	Z+17, r25	; 0x11
 946:	80 8b       	std	Z+16, r24	; 0x10
 948:	85 e8       	ldi	r24, 0x85	; 133
 94a:	90 e0       	ldi	r25, 0x00	; 0
 94c:	93 8b       	std	Z+19, r25	; 0x13
 94e:	82 8b       	std	Z+18, r24	; 0x12
 950:	84 e8       	ldi	r24, 0x84	; 132
 952:	90 e0       	ldi	r25, 0x00	; 0
 954:	95 8b       	std	Z+21, r25	; 0x15
 956:	84 8b       	std	Z+20, r24	; 0x14
 958:	80 e8       	ldi	r24, 0x80	; 128
 95a:	90 e0       	ldi	r25, 0x00	; 0
 95c:	97 8b       	std	Z+23, r25	; 0x17
 95e:	86 8b       	std	Z+22, r24	; 0x16
 960:	11 8e       	std	Z+25, r1	; 0x19
 962:	12 8e       	std	Z+26, r1	; 0x1a
 964:	13 8e       	std	Z+27, r1	; 0x1b
 966:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_22():
C:\Users\passp\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.5.2\cores\tinymodern/HardwareSerial0.cpp:77

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
}
 968:	08 95       	ret

0000096a <__mulqi3>:
__mulqi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:224
 96a:	00 24       	eor	r0, r0

0000096c <__mulqi3_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:226
 96c:	80 fd       	sbrc	r24, 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:227
 96e:	06 0e       	add	r0, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:228
 970:	66 0f       	add	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:229
 972:	11 f0       	breq	.+4      	; 0x978 <__mulqi3_exit>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:230
 974:	86 95       	lsr	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:231
 976:	d1 f7       	brne	.-12     	; 0x96c <__mulqi3_loop>

00000978 <__mulqi3_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:233
 978:	80 2d       	mov	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:234
 97a:	08 95       	ret

0000097c <__subsf3>:
__subsf3():
 97c:	50 58       	subi	r21, 0x80	; 128

0000097e <__addsf3>:
 97e:	bb 27       	eor	r27, r27
 980:	aa 27       	eor	r26, r26
 982:	0e d0       	rcall	.+28     	; 0x9a0 <__addsf3x>
 984:	75 c1       	rjmp	.+746    	; 0xc70 <__fp_round>
__addsf3():
 986:	66 d1       	rcall	.+716    	; 0xc54 <__fp_pscA>
 988:	30 f0       	brcs	.+12     	; 0x996 <__addsf3+0x18>
 98a:	6b d1       	rcall	.+726    	; 0xc62 <__fp_pscB>
 98c:	20 f0       	brcs	.+8      	; 0x996 <__addsf3+0x18>
 98e:	31 f4       	brne	.+12     	; 0x99c <__addsf3+0x1e>
 990:	9f 3f       	cpi	r25, 0xFF	; 255
 992:	11 f4       	brne	.+4      	; 0x998 <__addsf3+0x1a>
 994:	1e f4       	brtc	.+6      	; 0x99c <__addsf3+0x1e>
 996:	5b c1       	rjmp	.+694    	; 0xc4e <__fp_nan>
 998:	0e f4       	brtc	.+2      	; 0x99c <__addsf3+0x1e>
 99a:	e0 95       	com	r30
 99c:	e7 fb       	bst	r30, 7
 99e:	51 c1       	rjmp	.+674    	; 0xc42 <__fp_inf>

000009a0 <__addsf3x>:
__addsf3x():
 9a0:	e9 2f       	mov	r30, r25
 9a2:	77 d1       	rcall	.+750    	; 0xc92 <__fp_split3>
 9a4:	80 f3       	brcs	.-32     	; 0x986 <__addsf3+0x8>
 9a6:	ba 17       	cp	r27, r26
 9a8:	62 07       	cpc	r22, r18
 9aa:	73 07       	cpc	r23, r19
 9ac:	84 07       	cpc	r24, r20
 9ae:	95 07       	cpc	r25, r21
 9b0:	18 f0       	brcs	.+6      	; 0x9b8 <__addsf3x+0x18>
 9b2:	71 f4       	brne	.+28     	; 0x9d0 <__addsf3x+0x30>
 9b4:	9e f5       	brtc	.+102    	; 0xa1c <__addsf3x+0x7c>
 9b6:	8f c1       	rjmp	.+798    	; 0xcd6 <__fp_zero>
 9b8:	0e f4       	brtc	.+2      	; 0x9bc <__addsf3x+0x1c>
 9ba:	e0 95       	com	r30
 9bc:	0b 2e       	mov	r0, r27
 9be:	ba 2f       	mov	r27, r26
 9c0:	a0 2d       	mov	r26, r0
 9c2:	0b 01       	movw	r0, r22
 9c4:	b9 01       	movw	r22, r18
 9c6:	90 01       	movw	r18, r0
 9c8:	0c 01       	movw	r0, r24
 9ca:	ca 01       	movw	r24, r20
 9cc:	a0 01       	movw	r20, r0
 9ce:	11 24       	eor	r1, r1
 9d0:	ff 27       	eor	r31, r31
 9d2:	59 1b       	sub	r21, r25
 9d4:	99 f0       	breq	.+38     	; 0x9fc <__addsf3x+0x5c>
 9d6:	59 3f       	cpi	r21, 0xF9	; 249
 9d8:	50 f4       	brcc	.+20     	; 0x9ee <__addsf3x+0x4e>
 9da:	50 3e       	cpi	r21, 0xE0	; 224
 9dc:	68 f1       	brcs	.+90     	; 0xa38 <__addsf3x+0x98>
 9de:	1a 16       	cp	r1, r26
 9e0:	f0 40       	sbci	r31, 0x00	; 0
 9e2:	a2 2f       	mov	r26, r18
 9e4:	23 2f       	mov	r18, r19
 9e6:	34 2f       	mov	r19, r20
 9e8:	44 27       	eor	r20, r20
 9ea:	58 5f       	subi	r21, 0xF8	; 248
 9ec:	f3 cf       	rjmp	.-26     	; 0x9d4 <__addsf3x+0x34>
 9ee:	46 95       	lsr	r20
 9f0:	37 95       	ror	r19
 9f2:	27 95       	ror	r18
 9f4:	a7 95       	ror	r26
 9f6:	f0 40       	sbci	r31, 0x00	; 0
 9f8:	53 95       	inc	r21
 9fa:	c9 f7       	brne	.-14     	; 0x9ee <__addsf3x+0x4e>
 9fc:	7e f4       	brtc	.+30     	; 0xa1c <__addsf3x+0x7c>
 9fe:	1f 16       	cp	r1, r31
 a00:	ba 0b       	sbc	r27, r26
 a02:	62 0b       	sbc	r22, r18
 a04:	73 0b       	sbc	r23, r19
 a06:	84 0b       	sbc	r24, r20
 a08:	ba f0       	brmi	.+46     	; 0xa38 <__addsf3x+0x98>
 a0a:	91 50       	subi	r25, 0x01	; 1
 a0c:	a1 f0       	breq	.+40     	; 0xa36 <__addsf3x+0x96>
 a0e:	ff 0f       	add	r31, r31
 a10:	bb 1f       	adc	r27, r27
 a12:	66 1f       	adc	r22, r22
 a14:	77 1f       	adc	r23, r23
 a16:	88 1f       	adc	r24, r24
 a18:	c2 f7       	brpl	.-16     	; 0xa0a <__addsf3x+0x6a>
 a1a:	0e c0       	rjmp	.+28     	; 0xa38 <__addsf3x+0x98>
 a1c:	ba 0f       	add	r27, r26
 a1e:	62 1f       	adc	r22, r18
 a20:	73 1f       	adc	r23, r19
 a22:	84 1f       	adc	r24, r20
 a24:	48 f4       	brcc	.+18     	; 0xa38 <__addsf3x+0x98>
 a26:	87 95       	ror	r24
 a28:	77 95       	ror	r23
 a2a:	67 95       	ror	r22
 a2c:	b7 95       	ror	r27
 a2e:	f7 95       	ror	r31
 a30:	9e 3f       	cpi	r25, 0xFE	; 254
 a32:	08 f0       	brcs	.+2      	; 0xa36 <__addsf3x+0x96>
 a34:	b3 cf       	rjmp	.-154    	; 0x99c <__addsf3+0x1e>
 a36:	93 95       	inc	r25
 a38:	88 0f       	add	r24, r24
 a3a:	08 f0       	brcs	.+2      	; 0xa3e <__addsf3x+0x9e>
 a3c:	99 27       	eor	r25, r25
 a3e:	ee 0f       	add	r30, r30
 a40:	97 95       	ror	r25
 a42:	87 95       	ror	r24
 a44:	08 95       	ret

00000a46 <__cmpsf2>:
 a46:	d9 d0       	rcall	.+434    	; 0xbfa <__fp_cmp>
 a48:	08 f4       	brcc	.+2      	; 0xa4c <__cmpsf2+0x6>
 a4a:	81 e0       	ldi	r24, 0x01	; 1
 a4c:	08 95       	ret

00000a4e <__divsf3>:
 a4e:	0c d0       	rcall	.+24     	; 0xa68 <__divsf3x>
 a50:	0f c1       	rjmp	.+542    	; 0xc70 <__fp_round>
 a52:	07 d1       	rcall	.+526    	; 0xc62 <__fp_pscB>
 a54:	40 f0       	brcs	.+16     	; 0xa66 <__divsf3+0x18>
 a56:	fe d0       	rcall	.+508    	; 0xc54 <__fp_pscA>
 a58:	30 f0       	brcs	.+12     	; 0xa66 <__divsf3+0x18>
 a5a:	21 f4       	brne	.+8      	; 0xa64 <__divsf3+0x16>
 a5c:	5f 3f       	cpi	r21, 0xFF	; 255
 a5e:	19 f0       	breq	.+6      	; 0xa66 <__divsf3+0x18>
__divsf3():
 a60:	f0 c0       	rjmp	.+480    	; 0xc42 <__fp_inf>
 a62:	51 11       	cpse	r21, r1
 a64:	39 c1       	rjmp	.+626    	; 0xcd8 <__fp_szero>
 a66:	f3 c0       	rjmp	.+486    	; 0xc4e <__fp_nan>

00000a68 <__divsf3x>:
__divsf3x():
 a68:	14 d1       	rcall	.+552    	; 0xc92 <__fp_split3>
 a6a:	98 f3       	brcs	.-26     	; 0xa52 <__divsf3+0x4>

00000a6c <__divsf3_pse>:
 a6c:	99 23       	and	r25, r25
 a6e:	c9 f3       	breq	.-14     	; 0xa62 <__divsf3+0x14>
 a70:	55 23       	and	r21, r21
 a72:	b1 f3       	breq	.-20     	; 0xa60 <__divsf3+0x12>
 a74:	95 1b       	sub	r25, r21
 a76:	55 0b       	sbc	r21, r21
 a78:	bb 27       	eor	r27, r27
 a7a:	aa 27       	eor	r26, r26
 a7c:	62 17       	cp	r22, r18
 a7e:	73 07       	cpc	r23, r19
 a80:	84 07       	cpc	r24, r20
 a82:	38 f0       	brcs	.+14     	; 0xa92 <__divsf3_pse+0x26>
 a84:	9f 5f       	subi	r25, 0xFF	; 255
 a86:	5f 4f       	sbci	r21, 0xFF	; 255
 a88:	22 0f       	add	r18, r18
 a8a:	33 1f       	adc	r19, r19
 a8c:	44 1f       	adc	r20, r20
 a8e:	aa 1f       	adc	r26, r26
 a90:	a9 f3       	breq	.-22     	; 0xa7c <__divsf3_pse+0x10>
 a92:	33 d0       	rcall	.+102    	; 0xafa <__divsf3_pse+0x8e>
 a94:	0e 2e       	mov	r0, r30
 a96:	3a f0       	brmi	.+14     	; 0xaa6 <__divsf3_pse+0x3a>
 a98:	e0 e8       	ldi	r30, 0x80	; 128
 a9a:	30 d0       	rcall	.+96     	; 0xafc <__divsf3_pse+0x90>
 a9c:	91 50       	subi	r25, 0x01	; 1
 a9e:	50 40       	sbci	r21, 0x00	; 0
 aa0:	e6 95       	lsr	r30
 aa2:	00 1c       	adc	r0, r0
 aa4:	ca f7       	brpl	.-14     	; 0xa98 <__divsf3_pse+0x2c>
 aa6:	29 d0       	rcall	.+82     	; 0xafa <__divsf3_pse+0x8e>
 aa8:	fe 2f       	mov	r31, r30
 aaa:	27 d0       	rcall	.+78     	; 0xafa <__divsf3_pse+0x8e>
 aac:	66 0f       	add	r22, r22
 aae:	77 1f       	adc	r23, r23
 ab0:	88 1f       	adc	r24, r24
 ab2:	bb 1f       	adc	r27, r27
 ab4:	26 17       	cp	r18, r22
 ab6:	37 07       	cpc	r19, r23
 ab8:	48 07       	cpc	r20, r24
 aba:	ab 07       	cpc	r26, r27
 abc:	b0 e8       	ldi	r27, 0x80	; 128
 abe:	09 f0       	breq	.+2      	; 0xac2 <__divsf3_pse+0x56>
 ac0:	bb 0b       	sbc	r27, r27
 ac2:	80 2d       	mov	r24, r0
 ac4:	bf 01       	movw	r22, r30
 ac6:	ff 27       	eor	r31, r31
 ac8:	93 58       	subi	r25, 0x83	; 131
 aca:	5f 4f       	sbci	r21, 0xFF	; 255
 acc:	2a f0       	brmi	.+10     	; 0xad8 <__divsf3_pse+0x6c>
 ace:	9e 3f       	cpi	r25, 0xFE	; 254
 ad0:	51 05       	cpc	r21, r1
 ad2:	68 f0       	brcs	.+26     	; 0xaee <__divsf3_pse+0x82>
 ad4:	b6 c0       	rjmp	.+364    	; 0xc42 <__fp_inf>
 ad6:	00 c1       	rjmp	.+512    	; 0xcd8 <__fp_szero>
 ad8:	5f 3f       	cpi	r21, 0xFF	; 255
 ada:	ec f3       	brlt	.-6      	; 0xad6 <__divsf3_pse+0x6a>
 adc:	98 3e       	cpi	r25, 0xE8	; 232
 ade:	dc f3       	brlt	.-10     	; 0xad6 <__divsf3_pse+0x6a>
 ae0:	86 95       	lsr	r24
 ae2:	77 95       	ror	r23
 ae4:	67 95       	ror	r22
 ae6:	b7 95       	ror	r27
 ae8:	f7 95       	ror	r31
 aea:	9f 5f       	subi	r25, 0xFF	; 255
 aec:	c9 f7       	brne	.-14     	; 0xae0 <__divsf3_pse+0x74>
 aee:	88 0f       	add	r24, r24
 af0:	91 1d       	adc	r25, r1
 af2:	96 95       	lsr	r25
 af4:	87 95       	ror	r24
 af6:	97 f9       	bld	r25, 7
 af8:	08 95       	ret
 afa:	e1 e0       	ldi	r30, 0x01	; 1
 afc:	66 0f       	add	r22, r22
 afe:	77 1f       	adc	r23, r23
 b00:	88 1f       	adc	r24, r24
 b02:	bb 1f       	adc	r27, r27
 b04:	62 17       	cp	r22, r18
 b06:	73 07       	cpc	r23, r19
 b08:	84 07       	cpc	r24, r20
 b0a:	ba 07       	cpc	r27, r26
 b0c:	20 f0       	brcs	.+8      	; 0xb16 <__divsf3_pse+0xaa>
 b0e:	62 1b       	sub	r22, r18
 b10:	73 0b       	sbc	r23, r19
 b12:	84 0b       	sbc	r24, r20
 b14:	ba 0b       	sbc	r27, r26
 b16:	ee 1f       	adc	r30, r30
 b18:	88 f7       	brcc	.-30     	; 0xafc <__divsf3_pse+0x90>
 b1a:	e0 95       	com	r30
 b1c:	08 95       	ret

00000b1e <__fixsfsi>:
 b1e:	04 d0       	rcall	.+8      	; 0xb28 <__fixunssfsi>
 b20:	68 94       	set
 b22:	b1 11       	cpse	r27, r1
 b24:	d9 c0       	rjmp	.+434    	; 0xcd8 <__fp_szero>
 b26:	08 95       	ret

00000b28 <__fixunssfsi>:
 b28:	bc d0       	rcall	.+376    	; 0xca2 <__fp_splitA>
 b2a:	88 f0       	brcs	.+34     	; 0xb4e <__fixunssfsi+0x26>
 b2c:	9f 57       	subi	r25, 0x7F	; 127
 b2e:	90 f0       	brcs	.+36     	; 0xb54 <__fixunssfsi+0x2c>
 b30:	b9 2f       	mov	r27, r25
 b32:	99 27       	eor	r25, r25
__fixunssfsi():
 b34:	b7 51       	subi	r27, 0x17	; 23
 b36:	a0 f0       	brcs	.+40     	; 0xb60 <__fixunssfsi+0x38>
 b38:	d1 f0       	breq	.+52     	; 0xb6e <__fixunssfsi+0x46>
 b3a:	66 0f       	add	r22, r22
 b3c:	77 1f       	adc	r23, r23
 b3e:	88 1f       	adc	r24, r24
 b40:	99 1f       	adc	r25, r25
 b42:	1a f0       	brmi	.+6      	; 0xb4a <__fixunssfsi+0x22>
 b44:	ba 95       	dec	r27
 b46:	c9 f7       	brne	.-14     	; 0xb3a <__fixunssfsi+0x12>
 b48:	12 c0       	rjmp	.+36     	; 0xb6e <__fixunssfsi+0x46>
 b4a:	b1 30       	cpi	r27, 0x01	; 1
 b4c:	81 f0       	breq	.+32     	; 0xb6e <__fixunssfsi+0x46>
 b4e:	c3 d0       	rcall	.+390    	; 0xcd6 <__fp_zero>
 b50:	b1 e0       	ldi	r27, 0x01	; 1
 b52:	08 95       	ret
 b54:	c0 c0       	rjmp	.+384    	; 0xcd6 <__fp_zero>
 b56:	67 2f       	mov	r22, r23
 b58:	78 2f       	mov	r23, r24
 b5a:	88 27       	eor	r24, r24
 b5c:	b8 5f       	subi	r27, 0xF8	; 248
 b5e:	39 f0       	breq	.+14     	; 0xb6e <__fixunssfsi+0x46>
 b60:	b9 3f       	cpi	r27, 0xF9	; 249
 b62:	cc f3       	brlt	.-14     	; 0xb56 <__fixunssfsi+0x2e>
 b64:	86 95       	lsr	r24
 b66:	77 95       	ror	r23
 b68:	67 95       	ror	r22
 b6a:	b3 95       	inc	r27
 b6c:	d9 f7       	brne	.-10     	; 0xb64 <__fixunssfsi+0x3c>
 b6e:	3e f4       	brtc	.+14     	; 0xb7e <__fixunssfsi+0x56>
 b70:	90 95       	com	r25
 b72:	80 95       	com	r24
 b74:	70 95       	com	r23
 b76:	61 95       	neg	r22
 b78:	7f 4f       	sbci	r23, 0xFF	; 255
 b7a:	8f 4f       	sbci	r24, 0xFF	; 255
 b7c:	9f 4f       	sbci	r25, 0xFF	; 255
 b7e:	08 95       	ret

00000b80 <__floatunsisf>:
__floatunsisf():
 b80:	e8 94       	clt
 b82:	09 c0       	rjmp	.+18     	; 0xb96 <__floatsisf+0x12>

00000b84 <__floatsisf>:
 b84:	97 fb       	bst	r25, 7
 b86:	3e f4       	brtc	.+14     	; 0xb96 <__floatsisf+0x12>
 b88:	90 95       	com	r25
 b8a:	80 95       	com	r24
 b8c:	70 95       	com	r23
 b8e:	61 95       	neg	r22
 b90:	7f 4f       	sbci	r23, 0xFF	; 255
 b92:	8f 4f       	sbci	r24, 0xFF	; 255
 b94:	9f 4f       	sbci	r25, 0xFF	; 255
 b96:	99 23       	and	r25, r25
 b98:	a9 f0       	breq	.+42     	; 0xbc4 <__floatsisf+0x40>
 b9a:	f9 2f       	mov	r31, r25
 b9c:	96 e9       	ldi	r25, 0x96	; 150
 b9e:	bb 27       	eor	r27, r27
 ba0:	93 95       	inc	r25
 ba2:	f6 95       	lsr	r31
 ba4:	87 95       	ror	r24
 ba6:	77 95       	ror	r23
 ba8:	67 95       	ror	r22
 baa:	b7 95       	ror	r27
 bac:	f1 11       	cpse	r31, r1
 bae:	f8 cf       	rjmp	.-16     	; 0xba0 <__floatsisf+0x1c>
 bb0:	fa f4       	brpl	.+62     	; 0xbf0 <__floatsisf+0x6c>
 bb2:	bb 0f       	add	r27, r27
 bb4:	11 f4       	brne	.+4      	; 0xbba <__floatsisf+0x36>
 bb6:	60 ff       	sbrs	r22, 0
 bb8:	1b c0       	rjmp	.+54     	; 0xbf0 <__floatsisf+0x6c>
 bba:	6f 5f       	subi	r22, 0xFF	; 255
 bbc:	7f 4f       	sbci	r23, 0xFF	; 255
 bbe:	8f 4f       	sbci	r24, 0xFF	; 255
 bc0:	9f 4f       	sbci	r25, 0xFF	; 255
 bc2:	16 c0       	rjmp	.+44     	; 0xbf0 <__floatsisf+0x6c>
 bc4:	88 23       	and	r24, r24
 bc6:	11 f0       	breq	.+4      	; 0xbcc <__floatsisf+0x48>
 bc8:	96 e9       	ldi	r25, 0x96	; 150
 bca:	11 c0       	rjmp	.+34     	; 0xbee <__floatsisf+0x6a>
 bcc:	77 23       	and	r23, r23
 bce:	21 f0       	breq	.+8      	; 0xbd8 <__floatsisf+0x54>
 bd0:	9e e8       	ldi	r25, 0x8E	; 142
 bd2:	87 2f       	mov	r24, r23
 bd4:	76 2f       	mov	r23, r22
 bd6:	05 c0       	rjmp	.+10     	; 0xbe2 <__floatsisf+0x5e>
 bd8:	66 23       	and	r22, r22
 bda:	71 f0       	breq	.+28     	; 0xbf8 <__floatsisf+0x74>
 bdc:	96 e8       	ldi	r25, 0x86	; 134
 bde:	86 2f       	mov	r24, r22
 be0:	70 e0       	ldi	r23, 0x00	; 0
 be2:	60 e0       	ldi	r22, 0x00	; 0
 be4:	2a f0       	brmi	.+10     	; 0xbf0 <__floatsisf+0x6c>
 be6:	9a 95       	dec	r25
 be8:	66 0f       	add	r22, r22
 bea:	77 1f       	adc	r23, r23
 bec:	88 1f       	adc	r24, r24
 bee:	da f7       	brpl	.-10     	; 0xbe6 <__floatsisf+0x62>
 bf0:	88 0f       	add	r24, r24
 bf2:	96 95       	lsr	r25
 bf4:	87 95       	ror	r24
 bf6:	97 f9       	bld	r25, 7
 bf8:	08 95       	ret

00000bfa <__fp_cmp>:
__fp_cmp():
 bfa:	99 0f       	add	r25, r25
 bfc:	00 08       	sbc	r0, r0
 bfe:	55 0f       	add	r21, r21
 c00:	aa 0b       	sbc	r26, r26
 c02:	e0 e8       	ldi	r30, 0x80	; 128
 c04:	fe ef       	ldi	r31, 0xFE	; 254
 c06:	16 16       	cp	r1, r22
 c08:	17 06       	cpc	r1, r23
 c0a:	e8 07       	cpc	r30, r24
 c0c:	f9 07       	cpc	r31, r25
 c0e:	c0 f0       	brcs	.+48     	; 0xc40 <__fp_cmp+0x46>
 c10:	12 16       	cp	r1, r18
 c12:	13 06       	cpc	r1, r19
 c14:	e4 07       	cpc	r30, r20
 c16:	f5 07       	cpc	r31, r21
 c18:	98 f0       	brcs	.+38     	; 0xc40 <__fp_cmp+0x46>
 c1a:	62 1b       	sub	r22, r18
 c1c:	73 0b       	sbc	r23, r19
 c1e:	84 0b       	sbc	r24, r20
 c20:	95 0b       	sbc	r25, r21
 c22:	39 f4       	brne	.+14     	; 0xc32 <__fp_cmp+0x38>
 c24:	0a 26       	eor	r0, r26
 c26:	61 f0       	breq	.+24     	; 0xc40 <__fp_cmp+0x46>
 c28:	23 2b       	or	r18, r19
 c2a:	24 2b       	or	r18, r20
 c2c:	25 2b       	or	r18, r21
 c2e:	21 f4       	brne	.+8      	; 0xc38 <__fp_cmp+0x3e>
 c30:	08 95       	ret
 c32:	0a 26       	eor	r0, r26
 c34:	09 f4       	brne	.+2      	; 0xc38 <__fp_cmp+0x3e>
 c36:	a1 40       	sbci	r26, 0x01	; 1
 c38:	a6 95       	lsr	r26
 c3a:	8f ef       	ldi	r24, 0xFF	; 255
 c3c:	81 1d       	adc	r24, r1
 c3e:	81 1d       	adc	r24, r1
 c40:	08 95       	ret

00000c42 <__fp_inf>:
__fp_inf():
 c42:	97 f9       	bld	r25, 7
 c44:	9f 67       	ori	r25, 0x7F	; 127
 c46:	80 e8       	ldi	r24, 0x80	; 128
 c48:	70 e0       	ldi	r23, 0x00	; 0
 c4a:	60 e0       	ldi	r22, 0x00	; 0
 c4c:	08 95       	ret

00000c4e <__fp_nan>:
__fp_nan():
 c4e:	9f ef       	ldi	r25, 0xFF	; 255
 c50:	80 ec       	ldi	r24, 0xC0	; 192
 c52:	08 95       	ret

00000c54 <__fp_pscA>:
__fp_pscA():
 c54:	00 24       	eor	r0, r0
 c56:	0a 94       	dec	r0
 c58:	16 16       	cp	r1, r22
 c5a:	17 06       	cpc	r1, r23
 c5c:	18 06       	cpc	r1, r24
 c5e:	09 06       	cpc	r0, r25
 c60:	08 95       	ret

00000c62 <__fp_pscB>:
__fp_pscB():
 c62:	00 24       	eor	r0, r0
 c64:	0a 94       	dec	r0
 c66:	12 16       	cp	r1, r18
 c68:	13 06       	cpc	r1, r19
 c6a:	14 06       	cpc	r1, r20
 c6c:	05 06       	cpc	r0, r21
 c6e:	08 95       	ret

00000c70 <__fp_round>:
__fp_round():
 c70:	09 2e       	mov	r0, r25
 c72:	03 94       	inc	r0
 c74:	00 0c       	add	r0, r0
 c76:	11 f4       	brne	.+4      	; 0xc7c <__fp_round+0xc>
 c78:	88 23       	and	r24, r24
 c7a:	52 f0       	brmi	.+20     	; 0xc90 <__fp_round+0x20>
 c7c:	bb 0f       	add	r27, r27
 c7e:	40 f4       	brcc	.+16     	; 0xc90 <__fp_round+0x20>
 c80:	bf 2b       	or	r27, r31
 c82:	11 f4       	brne	.+4      	; 0xc88 <__fp_round+0x18>
 c84:	60 ff       	sbrs	r22, 0
 c86:	04 c0       	rjmp	.+8      	; 0xc90 <__fp_round+0x20>
 c88:	6f 5f       	subi	r22, 0xFF	; 255
 c8a:	7f 4f       	sbci	r23, 0xFF	; 255
 c8c:	8f 4f       	sbci	r24, 0xFF	; 255
 c8e:	9f 4f       	sbci	r25, 0xFF	; 255
 c90:	08 95       	ret

00000c92 <__fp_split3>:
__fp_split3():
 c92:	57 fd       	sbrc	r21, 7
 c94:	90 58       	subi	r25, 0x80	; 128
 c96:	44 0f       	add	r20, r20
 c98:	55 1f       	adc	r21, r21
 c9a:	59 f0       	breq	.+22     	; 0xcb2 <__fp_splitA+0x10>
 c9c:	5f 3f       	cpi	r21, 0xFF	; 255
 c9e:	71 f0       	breq	.+28     	; 0xcbc <__fp_splitA+0x1a>
 ca0:	47 95       	ror	r20

00000ca2 <__fp_splitA>:
 ca2:	88 0f       	add	r24, r24
 ca4:	97 fb       	bst	r25, 7
 ca6:	99 1f       	adc	r25, r25
 ca8:	61 f0       	breq	.+24     	; 0xcc2 <__fp_splitA+0x20>
 caa:	9f 3f       	cpi	r25, 0xFF	; 255
 cac:	79 f0       	breq	.+30     	; 0xccc <__fp_splitA+0x2a>
 cae:	87 95       	ror	r24
 cb0:	08 95       	ret
 cb2:	12 16       	cp	r1, r18
 cb4:	13 06       	cpc	r1, r19
 cb6:	14 06       	cpc	r1, r20
 cb8:	55 1f       	adc	r21, r21
 cba:	f2 cf       	rjmp	.-28     	; 0xca0 <__fp_split3+0xe>
 cbc:	46 95       	lsr	r20
 cbe:	f1 df       	rcall	.-30     	; 0xca2 <__fp_splitA>
 cc0:	08 c0       	rjmp	.+16     	; 0xcd2 <__fp_splitA+0x30>
 cc2:	16 16       	cp	r1, r22
 cc4:	17 06       	cpc	r1, r23
 cc6:	18 06       	cpc	r1, r24
 cc8:	99 1f       	adc	r25, r25
 cca:	f1 cf       	rjmp	.-30     	; 0xcae <__fp_splitA+0xc>
 ccc:	86 95       	lsr	r24
 cce:	71 05       	cpc	r23, r1
 cd0:	61 05       	cpc	r22, r1
 cd2:	08 94       	sec
 cd4:	08 95       	ret

00000cd6 <__fp_zero>:
__fp_zero():
 cd6:	e8 94       	clt

00000cd8 <__fp_szero>:
 cd8:	bb 27       	eor	r27, r27
 cda:	66 27       	eor	r22, r22
 cdc:	77 27       	eor	r23, r23
 cde:	cb 01       	movw	r24, r22
 ce0:	97 f9       	bld	r25, 7
 ce2:	08 95       	ret

00000ce4 <__gesf2>:
__gesf2():
 ce4:	8a df       	rcall	.-236    	; 0xbfa <__fp_cmp>
 ce6:	08 f4       	brcc	.+2      	; 0xcea <__gesf2+0x6>
 ce8:	8f ef       	ldi	r24, 0xFF	; 255
 cea:	08 95       	ret

00000cec <__mulsf3>:
__mulsf3():
 cec:	0a d0       	rcall	.+20     	; 0xd02 <__mulsf3x>
 cee:	c0 cf       	rjmp	.-128    	; 0xc70 <__fp_round>
 cf0:	b1 df       	rcall	.-158    	; 0xc54 <__fp_pscA>
 cf2:	28 f0       	brcs	.+10     	; 0xcfe <__mulsf3+0x12>
 cf4:	b6 df       	rcall	.-148    	; 0xc62 <__fp_pscB>
 cf6:	18 f0       	brcs	.+6      	; 0xcfe <__mulsf3+0x12>
 cf8:	95 23       	and	r25, r21
 cfa:	09 f0       	breq	.+2      	; 0xcfe <__mulsf3+0x12>
 cfc:	a2 cf       	rjmp	.-188    	; 0xc42 <__fp_inf>
 cfe:	a7 cf       	rjmp	.-178    	; 0xc4e <__fp_nan>
 d00:	eb cf       	rjmp	.-42     	; 0xcd8 <__fp_szero>

00000d02 <__mulsf3x>:
__mulsf3x():
 d02:	c7 df       	rcall	.-114    	; 0xc92 <__fp_split3>
 d04:	a8 f3       	brcs	.-22     	; 0xcf0 <__mulsf3+0x4>

00000d06 <__mulsf3_pse>:
 d06:	99 23       	and	r25, r25
 d08:	d9 f3       	breq	.-10     	; 0xd00 <__mulsf3+0x14>
 d0a:	55 23       	and	r21, r21
 d0c:	c9 f3       	breq	.-14     	; 0xd00 <__mulsf3+0x14>
 d0e:	95 0f       	add	r25, r21
 d10:	50 e0       	ldi	r21, 0x00	; 0
 d12:	55 1f       	adc	r21, r21
 d14:	aa 27       	eor	r26, r26
 d16:	ee 27       	eor	r30, r30
 d18:	ff 27       	eor	r31, r31
 d1a:	bb 27       	eor	r27, r27
 d1c:	00 24       	eor	r0, r0
 d1e:	08 94       	sec
 d20:	67 95       	ror	r22
 d22:	20 f4       	brcc	.+8      	; 0xd2c <__mulsf3_pse+0x26>
 d24:	e2 0f       	add	r30, r18
 d26:	f3 1f       	adc	r31, r19
 d28:	b4 1f       	adc	r27, r20
 d2a:	0a 1e       	adc	r0, r26
 d2c:	22 0f       	add	r18, r18
 d2e:	33 1f       	adc	r19, r19
 d30:	44 1f       	adc	r20, r20
 d32:	aa 1f       	adc	r26, r26
 d34:	66 95       	lsr	r22
 d36:	a9 f7       	brne	.-22     	; 0xd22 <__mulsf3_pse+0x1c>
 d38:	77 95       	ror	r23
 d3a:	30 f4       	brcc	.+12     	; 0xd48 <__mulsf3_pse+0x42>
 d3c:	f3 0f       	add	r31, r19
 d3e:	b4 1f       	adc	r27, r20
 d40:	0a 1e       	adc	r0, r26
 d42:	12 1e       	adc	r1, r18
 d44:	08 f4       	brcc	.+2      	; 0xd48 <__mulsf3_pse+0x42>
 d46:	63 95       	inc	r22
 d48:	33 0f       	add	r19, r19
 d4a:	44 1f       	adc	r20, r20
 d4c:	aa 1f       	adc	r26, r26
 d4e:	22 1f       	adc	r18, r18
 d50:	76 95       	lsr	r23
 d52:	99 f7       	brne	.-26     	; 0xd3a <__mulsf3_pse+0x34>
 d54:	87 95       	ror	r24
 d56:	20 f4       	brcc	.+8      	; 0xd60 <__mulsf3_pse+0x5a>
 d58:	b4 0f       	add	r27, r20
 d5a:	0a 1e       	adc	r0, r26
 d5c:	12 1e       	adc	r1, r18
 d5e:	63 1f       	adc	r22, r19
 d60:	44 0f       	add	r20, r20
 d62:	aa 1f       	adc	r26, r26
 d64:	22 1f       	adc	r18, r18
 d66:	33 1f       	adc	r19, r19
 d68:	86 95       	lsr	r24
 d6a:	a9 f7       	brne	.-22     	; 0xd56 <__mulsf3_pse+0x50>
 d6c:	86 2f       	mov	r24, r22
 d6e:	71 2d       	mov	r23, r1
 d70:	60 2d       	mov	r22, r0
 d72:	11 24       	eor	r1, r1
 d74:	9f 57       	subi	r25, 0x7F	; 127
 d76:	50 40       	sbci	r21, 0x00	; 0
 d78:	8a f0       	brmi	.+34     	; 0xd9c <__mulsf3_pse+0x96>
 d7a:	e1 f0       	breq	.+56     	; 0xdb4 <__mulsf3_pse+0xae>
 d7c:	88 23       	and	r24, r24
 d7e:	4a f0       	brmi	.+18     	; 0xd92 <__mulsf3_pse+0x8c>
 d80:	ee 0f       	add	r30, r30
 d82:	ff 1f       	adc	r31, r31
 d84:	bb 1f       	adc	r27, r27
 d86:	66 1f       	adc	r22, r22
 d88:	77 1f       	adc	r23, r23
 d8a:	88 1f       	adc	r24, r24
 d8c:	91 50       	subi	r25, 0x01	; 1
 d8e:	50 40       	sbci	r21, 0x00	; 0
 d90:	a9 f7       	brne	.-22     	; 0xd7c <__mulsf3_pse+0x76>
 d92:	9e 3f       	cpi	r25, 0xFE	; 254
 d94:	51 05       	cpc	r21, r1
 d96:	70 f0       	brcs	.+28     	; 0xdb4 <__mulsf3_pse+0xae>
 d98:	54 cf       	rjmp	.-344    	; 0xc42 <__fp_inf>
 d9a:	9e cf       	rjmp	.-196    	; 0xcd8 <__fp_szero>
 d9c:	5f 3f       	cpi	r21, 0xFF	; 255
 d9e:	ec f3       	brlt	.-6      	; 0xd9a <__mulsf3_pse+0x94>
 da0:	98 3e       	cpi	r25, 0xE8	; 232
 da2:	dc f3       	brlt	.-10     	; 0xd9a <__mulsf3_pse+0x94>
 da4:	86 95       	lsr	r24
 da6:	77 95       	ror	r23
 da8:	67 95       	ror	r22
 daa:	b7 95       	ror	r27
 dac:	f7 95       	ror	r31
 dae:	e7 95       	ror	r30
 db0:	9f 5f       	subi	r25, 0xFF	; 255
 db2:	c1 f7       	brne	.-16     	; 0xda4 <__mulsf3_pse+0x9e>
 db4:	fe 2b       	or	r31, r30
 db6:	88 0f       	add	r24, r24
 db8:	91 1d       	adc	r25, r1
 dba:	96 95       	lsr	r25
 dbc:	87 95       	ror	r24
 dbe:	97 f9       	bld	r25, 7
 dc0:	08 95       	ret

00000dc2 <__unordsf2>:
 dc2:	1b df       	rcall	.-458    	; 0xbfa <__fp_cmp>
 dc4:	88 0b       	sbc	r24, r24
 dc6:	99 0b       	sbc	r25, r25
 dc8:	08 95       	ret

00000dca <__udivmodsi4>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
 dca:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
 dcc:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
 dce:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
 dd0:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
 dd2:	fd 01       	movw	r30, r26
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
 dd4:	0d c0       	rjmp	.+26     	; 0xdf0 <__udivmodsi4_ep>

00000dd6 <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
 dd6:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
 dd8:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
 dda:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
 ddc:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
 dde:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
 de0:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
 de2:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
 de4:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
 de6:	20 f0       	brcs	.+8      	; 0xdf0 <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
 de8:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
 dea:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
 dec:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
 dee:	f5 0b       	sbc	r31, r21

00000df0 <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
 df0:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
 df2:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
 df4:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
 df6:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
 df8:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
 dfa:	69 f7       	brne	.-38     	; 0xdd6 <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
 dfc:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
 dfe:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
 e00:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
 e02:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
 e04:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
 e06:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
 e08:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
 e0a:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
 e0c:	08 95       	ret

00000e0e <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
 e0e:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
 e10:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
 e12:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
 e14:	f4 91       	lpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
 e16:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
 e18:	09 94       	ijmp

00000e1a <_exit>:
exit():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
 e1a:	f8 94       	cli

00000e1c <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
 e1c:	ff cf       	rjmp	.-2      	; 0xe1c <__stop_program>
